
tent4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c90  08009c90  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c98  08009c98  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c9c  08009c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009ca0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          00000a44  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af8  20000af8  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019b3a  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e25  00000000  00000000  00039c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001678  00000000  00000000  0003da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001160  00000000  00000000  0003f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024272  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d45c  00000000  00000000  000644d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d364a  00000000  00000000  0008192e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006468  00000000  00000000  00154f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0015b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c5c 	.word	0x08009c5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	08009c5c 	.word	0x08009c5c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b970 	b.w	8000c3c <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9e08      	ldr	r6, [sp, #32]
 800097a:	460d      	mov	r5, r1
 800097c:	4604      	mov	r4, r0
 800097e:	460f      	mov	r7, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d14a      	bne.n	8000a1a <__udivmoddi4+0xa6>
 8000984:	428a      	cmp	r2, r1
 8000986:	4694      	mov	ip, r2
 8000988:	d965      	bls.n	8000a56 <__udivmoddi4+0xe2>
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	b143      	cbz	r3, 80009a2 <__udivmoddi4+0x2e>
 8000990:	fa02 fc03 	lsl.w	ip, r2, r3
 8000994:	f1c3 0220 	rsb	r2, r3, #32
 8000998:	409f      	lsls	r7, r3
 800099a:	fa20 f202 	lsr.w	r2, r0, r2
 800099e:	4317      	orrs	r7, r2
 80009a0:	409c      	lsls	r4, r3
 80009a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009a6:	fa1f f58c 	uxth.w	r5, ip
 80009aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80009ae:	0c22      	lsrs	r2, r4, #16
 80009b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80009b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009b8:	fb01 f005 	mul.w	r0, r1, r5
 80009bc:	4290      	cmp	r0, r2
 80009be:	d90a      	bls.n	80009d6 <__udivmoddi4+0x62>
 80009c0:	eb1c 0202 	adds.w	r2, ip, r2
 80009c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80009c8:	f080 811c 	bcs.w	8000c04 <__udivmoddi4+0x290>
 80009cc:	4290      	cmp	r0, r2
 80009ce:	f240 8119 	bls.w	8000c04 <__udivmoddi4+0x290>
 80009d2:	3902      	subs	r1, #2
 80009d4:	4462      	add	r2, ip
 80009d6:	1a12      	subs	r2, r2, r0
 80009d8:	b2a4      	uxth	r4, r4
 80009da:	fbb2 f0fe 	udiv	r0, r2, lr
 80009de:	fb0e 2210 	mls	r2, lr, r0, r2
 80009e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e6:	fb00 f505 	mul.w	r5, r0, r5
 80009ea:	42a5      	cmp	r5, r4
 80009ec:	d90a      	bls.n	8000a04 <__udivmoddi4+0x90>
 80009ee:	eb1c 0404 	adds.w	r4, ip, r4
 80009f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f6:	f080 8107 	bcs.w	8000c08 <__udivmoddi4+0x294>
 80009fa:	42a5      	cmp	r5, r4
 80009fc:	f240 8104 	bls.w	8000c08 <__udivmoddi4+0x294>
 8000a00:	4464      	add	r4, ip
 8000a02:	3802      	subs	r0, #2
 8000a04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	b11e      	cbz	r6, 8000a16 <__udivmoddi4+0xa2>
 8000a0e:	40dc      	lsrs	r4, r3
 8000a10:	2300      	movs	r3, #0
 8000a12:	e9c6 4300 	strd	r4, r3, [r6]
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0xbc>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	f000 80ed 	beq.w	8000bfe <__udivmoddi4+0x28a>
 8000a24:	2100      	movs	r1, #0
 8000a26:	e9c6 0500 	strd	r0, r5, [r6]
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a30:	fab3 f183 	clz	r1, r3
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d149      	bne.n	8000acc <__udivmoddi4+0x158>
 8000a38:	42ab      	cmp	r3, r5
 8000a3a:	d302      	bcc.n	8000a42 <__udivmoddi4+0xce>
 8000a3c:	4282      	cmp	r2, r0
 8000a3e:	f200 80f8 	bhi.w	8000c32 <__udivmoddi4+0x2be>
 8000a42:	1a84      	subs	r4, r0, r2
 8000a44:	eb65 0203 	sbc.w	r2, r5, r3
 8000a48:	2001      	movs	r0, #1
 8000a4a:	4617      	mov	r7, r2
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d0e2      	beq.n	8000a16 <__udivmoddi4+0xa2>
 8000a50:	e9c6 4700 	strd	r4, r7, [r6]
 8000a54:	e7df      	b.n	8000a16 <__udivmoddi4+0xa2>
 8000a56:	b902      	cbnz	r2, 8000a5a <__udivmoddi4+0xe6>
 8000a58:	deff      	udf	#255	; 0xff
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f040 8090 	bne.w	8000b84 <__udivmoddi4+0x210>
 8000a64:	1a8a      	subs	r2, r1, r2
 8000a66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6a:	fa1f fe8c 	uxth.w	lr, ip
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a74:	fb07 2015 	mls	r0, r7, r5, r2
 8000a78:	0c22      	lsrs	r2, r4, #16
 8000a7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a7e:	fb0e f005 	mul.w	r0, lr, r5
 8000a82:	4290      	cmp	r0, r2
 8000a84:	d908      	bls.n	8000a98 <__udivmoddi4+0x124>
 8000a86:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x122>
 8000a90:	4290      	cmp	r0, r2
 8000a92:	f200 80cb 	bhi.w	8000c2c <__udivmoddi4+0x2b8>
 8000a96:	4645      	mov	r5, r8
 8000a98:	1a12      	subs	r2, r2, r0
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000aa0:	fb07 2210 	mls	r2, r7, r0, r2
 8000aa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa8:	fb0e fe00 	mul.w	lr, lr, r0
 8000aac:	45a6      	cmp	lr, r4
 8000aae:	d908      	bls.n	8000ac2 <__udivmoddi4+0x14e>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab8:	d202      	bcs.n	8000ac0 <__udivmoddi4+0x14c>
 8000aba:	45a6      	cmp	lr, r4
 8000abc:	f200 80bb 	bhi.w	8000c36 <__udivmoddi4+0x2c2>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	eba4 040e 	sub.w	r4, r4, lr
 8000ac6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aca:	e79f      	b.n	8000a0c <__udivmoddi4+0x98>
 8000acc:	f1c1 0720 	rsb	r7, r1, #32
 8000ad0:	408b      	lsls	r3, r1
 8000ad2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ad6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ada:	fa05 f401 	lsl.w	r4, r5, r1
 8000ade:	fa20 f307 	lsr.w	r3, r0, r7
 8000ae2:	40fd      	lsrs	r5, r7
 8000ae4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000aee:	fa1f fe8c 	uxth.w	lr, ip
 8000af2:	fb09 5518 	mls	r5, r9, r8, r5
 8000af6:	0c1c      	lsrs	r4, r3, #16
 8000af8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000afc:	fb08 f50e 	mul.w	r5, r8, lr
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	fa02 f201 	lsl.w	r2, r2, r1
 8000b06:	fa00 f001 	lsl.w	r0, r0, r1
 8000b0a:	d90b      	bls.n	8000b24 <__udivmoddi4+0x1b0>
 8000b0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b14:	f080 8088 	bcs.w	8000c28 <__udivmoddi4+0x2b4>
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	f240 8085 	bls.w	8000c28 <__udivmoddi4+0x2b4>
 8000b1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b22:	4464      	add	r4, ip
 8000b24:	1b64      	subs	r4, r4, r5
 8000b26:	b29d      	uxth	r5, r3
 8000b28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b38:	45a6      	cmp	lr, r4
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x1da>
 8000b3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b44:	d26c      	bcs.n	8000c20 <__udivmoddi4+0x2ac>
 8000b46:	45a6      	cmp	lr, r4
 8000b48:	d96a      	bls.n	8000c20 <__udivmoddi4+0x2ac>
 8000b4a:	3b02      	subs	r3, #2
 8000b4c:	4464      	add	r4, ip
 8000b4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b52:	fba3 9502 	umull	r9, r5, r3, r2
 8000b56:	eba4 040e 	sub.w	r4, r4, lr
 8000b5a:	42ac      	cmp	r4, r5
 8000b5c:	46c8      	mov	r8, r9
 8000b5e:	46ae      	mov	lr, r5
 8000b60:	d356      	bcc.n	8000c10 <__udivmoddi4+0x29c>
 8000b62:	d053      	beq.n	8000c0c <__udivmoddi4+0x298>
 8000b64:	b156      	cbz	r6, 8000b7c <__udivmoddi4+0x208>
 8000b66:	ebb0 0208 	subs.w	r2, r0, r8
 8000b6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000b6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000b72:	40ca      	lsrs	r2, r1
 8000b74:	40cc      	lsrs	r4, r1
 8000b76:	4317      	orrs	r7, r2
 8000b78:	e9c6 7400 	strd	r7, r4, [r6]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b84:	f1c3 0120 	rsb	r1, r3, #32
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000b90:	fa25 f101 	lsr.w	r1, r5, r1
 8000b94:	409d      	lsls	r5, r3
 8000b96:	432a      	orrs	r2, r5
 8000b98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ba8:	0c11      	lsrs	r1, r2, #16
 8000baa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bae:	fb00 f50e 	mul.w	r5, r0, lr
 8000bb2:	428d      	cmp	r5, r1
 8000bb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x258>
 8000bba:	eb1c 0101 	adds.w	r1, ip, r1
 8000bbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bc2:	d22f      	bcs.n	8000c24 <__udivmoddi4+0x2b0>
 8000bc4:	428d      	cmp	r5, r1
 8000bc6:	d92d      	bls.n	8000c24 <__udivmoddi4+0x2b0>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1b49      	subs	r1, r1, r5
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000bd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000be0:	4291      	cmp	r1, r2
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x282>
 8000be4:	eb1c 0202 	adds.w	r2, ip, r2
 8000be8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bec:	d216      	bcs.n	8000c1c <__udivmoddi4+0x2a8>
 8000bee:	4291      	cmp	r1, r2
 8000bf0:	d914      	bls.n	8000c1c <__udivmoddi4+0x2a8>
 8000bf2:	3d02      	subs	r5, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a52      	subs	r2, r2, r1
 8000bf8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bfc:	e738      	b.n	8000a70 <__udivmoddi4+0xfc>
 8000bfe:	4631      	mov	r1, r6
 8000c00:	4630      	mov	r0, r6
 8000c02:	e708      	b.n	8000a16 <__udivmoddi4+0xa2>
 8000c04:	4639      	mov	r1, r7
 8000c06:	e6e6      	b.n	80009d6 <__udivmoddi4+0x62>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	e6fb      	b.n	8000a04 <__udivmoddi4+0x90>
 8000c0c:	4548      	cmp	r0, r9
 8000c0e:	d2a9      	bcs.n	8000b64 <__udivmoddi4+0x1f0>
 8000c10:	ebb9 0802 	subs.w	r8, r9, r2
 8000c14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	e7a3      	b.n	8000b64 <__udivmoddi4+0x1f0>
 8000c1c:	4645      	mov	r5, r8
 8000c1e:	e7ea      	b.n	8000bf6 <__udivmoddi4+0x282>
 8000c20:	462b      	mov	r3, r5
 8000c22:	e794      	b.n	8000b4e <__udivmoddi4+0x1da>
 8000c24:	4640      	mov	r0, r8
 8000c26:	e7d1      	b.n	8000bcc <__udivmoddi4+0x258>
 8000c28:	46d0      	mov	r8, sl
 8000c2a:	e77b      	b.n	8000b24 <__udivmoddi4+0x1b0>
 8000c2c:	3d02      	subs	r5, #2
 8000c2e:	4462      	add	r2, ip
 8000c30:	e732      	b.n	8000a98 <__udivmoddi4+0x124>
 8000c32:	4608      	mov	r0, r1
 8000c34:	e70a      	b.n	8000a4c <__udivmoddi4+0xd8>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	e742      	b.n	8000ac2 <__udivmoddi4+0x14e>

08000c3c <__aeabi_idiv0>:
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//modelo do conversor
	// Modelo estado 1

	A1[0][0]=-R/L;
 8000c44:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <main+0x104>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eef1 6a67 	vneg.f32	s13, s15
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <main+0x108>)
 8000c50:	ed93 7a00 	vldr	s14, [r3]
 8000c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <main+0x10c>)
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
	A1[1][1]=-1/(R0*C0);
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <main+0x110>)
 8000c60:	ed93 7a00 	vldr	s14, [r3]
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <main+0x114>)
 8000c66:	edd3 7a00 	vldr	s15, [r3]
 8000c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c6e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c76:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <main+0x10c>)
 8000c78:	edc3 7a03 	vstr	s15, [r3, #12]
	B1[0]=1/L;
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <main+0x108>)
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <main+0x118>)
 8000c8c:	edc3 7a00 	vstr	s15, [r3]
	// Modelo estado 2
	A2[0][0]=-R/L;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <main+0x104>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	eef1 6a67 	vneg.f32	s13, s15
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <main+0x108>)
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <main+0x11c>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
	A2[0][1]=-1/L;
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <main+0x108>)
 8000cac:	ed93 7a00 	vldr	s14, [r3]
 8000cb0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <main+0x11c>)
 8000cba:	edc3 7a01 	vstr	s15, [r3, #4]
	A2[1][1]=-1/(R0*C0);
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <main+0x110>)
 8000cc0:	ed93 7a00 	vldr	s14, [r3]
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <main+0x114>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cce:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <main+0x11c>)
 8000cd8:	edc3 7a03 	vstr	s15, [r3, #12]
	A2[1][0]=1/C0;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <main+0x114>)
 8000cde:	ed93 7a00 	vldr	s14, [r3]
 8000ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <main+0x11c>)
 8000cec:	edc3 7a02 	vstr	s15, [r3, #8]
	B2[0]=1/L;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <main+0x108>)
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <main+0x120>)
 8000d00:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 ff38 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f832 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 f9f0 	bl	80010f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d10:	f000 f898 	bl	8000e44 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d14:	f000 f8c4 	bl	8000ea0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d18:	f000 f8f2 	bl	8000f00 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d1c:	f008 fb4a 	bl	80093b4 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 8000d20:	f000 f9c2 	bl	80010a8 <MX_TIM10_Init>
  MX_TIM8_Init();
 8000d24:	f000 f922 	bl	8000f6c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <main+0x124>)
 8000d2a:	f004 fb25 	bl	8005378 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4); // Inicia o PWM
 8000d2e:	210c      	movs	r1, #12
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <main+0x128>)
 8000d32:	f004 fbeb 	bl	800550c <HAL_TIM_PWM_Start>
  TIM8->CCR4 =30; //Duty=CCR/ARR -> Inicia um PWM de 30% de duty-cycle
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <main+0x12c>)
 8000d38:	221e      	movs	r2, #30
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d3c:	f008 fb60 	bl	8009400 <MX_USB_HOST_Process>
 8000d40:	e7fc      	b.n	8000d3c <main+0xfc>
 8000d42:	bf00      	nop
 8000d44:	20000004 	.word	0x20000004
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	2000025c 	.word	0x2000025c
 8000d50:	20000008 	.word	0x20000008
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	2000026c 	.word	0x2000026c
 8000d5c:	20000274 	.word	0x20000274
 8000d60:	20000284 	.word	0x20000284
 8000d64:	2000020c 	.word	0x2000020c
 8000d68:	200001c4 	.word	0x200001c4
 8000d6c:	40010400 	.word	0x40010400

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f008 fedc 	bl	8009b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <SystemClock_Config+0xcc>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <SystemClock_Config+0xcc>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <SystemClock_Config+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <SystemClock_Config+0xd0>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de0:	2308      	movs	r3, #8
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dee:	2307      	movs	r3, #7
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fc22 	bl	8004640 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e02:	f000 fa73 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2105      	movs	r1, #5
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fe83 	bl	8004b30 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e30:	f000 fa5c 	bl	80012ec <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3750      	adds	r7, #80	; 0x50
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <MX_I2C1_Init+0x54>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_I2C1_Init+0x58>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_I2C1_Init+0x50>)
 8000e82:	f002 fdf9 	bl	8003a78 <HAL_I2C_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e8c:	f000 fa2e 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000d0 	.word	0x200000d0
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	000186a0 	.word	0x000186a0

08000ea0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <MX_I2S3_Init+0x58>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <MX_I2S3_Init+0x5c>)
 8000eca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_I2S3_Init+0x54>)
 8000ee0:	f002 ff0e 	bl	8003d00 <HAL_I2S_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000eea:	f000 f9ff 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000124 	.word	0x20000124
 8000ef8:	40003c00 	.word	0x40003c00
 8000efc:	00017700 	.word	0x00017700

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f004 f939 	bl	80051c8 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f000 f9c6 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000016c 	.word	0x2000016c
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f008 fdc9 	bl	8009b3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fac:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <MX_TIM8_Init+0x138>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fb2:	22a7      	movs	r2, #167	; 0xa7
 8000fb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fbe:	2263      	movs	r2, #99	; 0x63
 8000fc0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fd4:	4832      	ldr	r0, [pc, #200]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000fd6:	f004 f980 	bl	80052da <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000fe0:	f000 f984 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482b      	ldr	r0, [pc, #172]	; (80010a0 <MX_TIM8_Init+0x134>)
 8000ff2:	f004 fd1d 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000ffc:	f000 f976 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001000:	4827      	ldr	r0, [pc, #156]	; (80010a0 <MX_TIM8_Init+0x134>)
 8001002:	f004 fa29 	bl	8005458 <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800100c:	f000 f96e 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800101c:	4619      	mov	r1, r3
 800101e:	4820      	ldr	r0, [pc, #128]	; (80010a0 <MX_TIM8_Init+0x134>)
 8001020:	f005 f910 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800102a:	f000 f95f 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001032:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	220c      	movs	r2, #12
 800104e:	4619      	mov	r1, r3
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <MX_TIM8_Init+0x134>)
 8001052:	f004 fc2b 	bl	80058ac <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800105c:	f000 f946 	bl	80012ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM8_Init+0x134>)
 8001084:	f005 f95a 	bl	800633c <HAL_TIMEx_ConfigBreakDeadTime>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800108e:	f000 f92d 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM8_Init+0x134>)
 8001094:	f000 faa6 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8001098:	bf00      	nop
 800109a:	3758      	adds	r7, #88	; 0x58
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001c4 	.word	0x200001c4
 80010a4:	40010400 	.word	0x40010400

080010a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <MX_TIM10_Init+0x44>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010b4:	f240 3247 	movw	r2, #839	; 0x347
 80010b8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2-1;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_TIM10_Init+0x40>)
 80010d4:	f004 f901 	bl	80052da <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010de:	f000 f905 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000020c 	.word	0x2000020c
 80010ec:	40014400 	.word	0x40014400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a71      	ldr	r2, [pc, #452]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a63      	ldr	r2, [pc, #396]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <MX_GPIO_Init+0x1e4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2108      	movs	r1, #8
 80011b2:	4849      	ldr	r0, [pc, #292]	; (80012d8 <MX_GPIO_Init+0x1e8>)
 80011b4:	f001 f83c 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4847      	ldr	r0, [pc, #284]	; (80012dc <MX_GPIO_Init+0x1ec>)
 80011be:	f001 f837 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c2:	2200      	movs	r2, #0
 80011c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <MX_GPIO_Init+0x1f0>)
 80011ca:	f001 f831 	bl	8002230 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011ce:	2308      	movs	r3, #8
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	483c      	ldr	r0, [pc, #240]	; (80012d8 <MX_GPIO_Init+0x1e8>)
 80011e6:	f000 fe6f 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4836      	ldr	r0, [pc, #216]	; (80012dc <MX_GPIO_Init+0x1ec>)
 8001202:	f000 fe61 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001206:	2308      	movs	r3, #8
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001216:	2305      	movs	r3, #5
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	482e      	ldr	r0, [pc, #184]	; (80012dc <MX_GPIO_Init+0x1ec>)
 8001222:	f000 fe51 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001226:	2301      	movs	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	482a      	ldr	r0, [pc, #168]	; (80012e4 <MX_GPIO_Init+0x1f4>)
 800123c:	f000 fe44 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001240:	2304      	movs	r3, #4
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4825      	ldr	r0, [pc, #148]	; (80012e8 <MX_GPIO_Init+0x1f8>)
 8001254:	f000 fe38 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126a:	2305      	movs	r3, #5
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	481c      	ldr	r0, [pc, #112]	; (80012e8 <MX_GPIO_Init+0x1f8>)
 8001276:	f000 fe27 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800127e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_GPIO_Init+0x1f0>)
 8001294:	f000 fe18 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001298:	2320      	movs	r3, #32
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_GPIO_Init+0x1f0>)
 80012ac:	f000 fe0c 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_GPIO_Init+0x1e8>)
 80012c6:	f000 fdff 	bl	8001ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001336:	2007      	movs	r0, #7
 8001338:	f000 fd84 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_I2C_MspInit+0x84>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12c      	bne.n	80013c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001386:	f44f 7310 	mov.w	r3, #576	; 0x240
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001398:	2304      	movs	r3, #4
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <HAL_I2C_MspInit+0x8c>)
 80013a4:	f000 fd90 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_I2S_MspInit+0xf0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d15a      	bne.n	80014be <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800140c:	23c0      	movs	r3, #192	; 0xc0
 800140e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fd95 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001424:	f7ff ff62 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 8001432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_I2S_MspInit+0xf4>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800147c:	2310      	movs	r3, #16
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800148c:	2306      	movs	r3, #6
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <HAL_I2S_MspInit+0xf8>)
 8001498:	f000 fd16 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800149c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ae:	2306      	movs	r3, #6
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <HAL_I2S_MspInit+0xfc>)
 80014ba:	f000 fd05 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3738      	adds	r7, #56	; 0x38
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40003c00 	.word	0x40003c00
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020800 	.word	0x40020800

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <HAL_SPI_MspInit+0x84>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_SPI_MspInit+0x88>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_SPI_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001532:	23e0      	movs	r3, #224	; 0xe0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001542:	2305      	movs	r3, #5
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_SPI_MspInit+0x8c>)
 800154e:	f000 fcbb 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013000 	.word	0x40013000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_TIM_Base_MspInit+0x70>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10e      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001596:	e01a      	b.n	80015ce <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_TIM_Base_MspInit+0x78>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d115      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_TIM_Base_MspInit+0x74>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2019      	movs	r0, #25
 80015c4:	f000 fc49 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015c8:	2019      	movs	r0, #25
 80015ca:	f000 fc62 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40010400 	.word	0x40010400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40014400 	.word	0x40014400

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d11e      	bne.n	8001644 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001634:	2303      	movs	r3, #3
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_TIM_MspPostInit+0x70>)
 8001640:	f000 fc42 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010400 	.word	0x40010400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 faba 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	0000      	movs	r0, r0
	...

080016b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	pwm = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80016b4:	2140      	movs	r1, #64	; 0x40
 80016b6:	4896      	ldr	r0, [pc, #600]	; (8001910 <TIM1_UP_TIM10_IRQHandler+0x260>)
 80016b8:	f000 fda2 	bl	8002200 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b94      	ldr	r3, [pc, #592]	; (8001914 <TIM1_UP_TIM10_IRQHandler+0x264>)
 80016c2:	601a      	str	r2, [r3, #0]
//_____________________________Controlador_____________________________//
	sample[1]=sample[0];
 80016c4:	4b94      	ldr	r3, [pc, #592]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a93      	ldr	r2, [pc, #588]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80016ca:	6053      	str	r3, [r2, #4]
	sample[0]=x[1];
 80016cc:	4b93      	ldr	r3, [pc, #588]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a91      	ldr	r2, [pc, #580]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80016d2:	6013      	str	r3, [r2, #0]
	integral=(sample[0]+sample[1]-2*xev)*dt*Ki[1];
 80016d4:	4b90      	ldr	r3, [pc, #576]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	4b8f      	ldr	r3, [pc, #572]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80016dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <TIM1_UP_TIM10_IRQHandler+0x270>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe fff5 	bl	80006e4 <__aeabi_f2d>
 80016fa:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <TIM1_UP_TIM10_IRQHandler+0x274>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe fd62 	bl	80001c8 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4b86      	ldr	r3, [pc, #536]	; (8001928 <TIM1_UP_TIM10_IRQHandler+0x278>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ffd5 	bl	80006c0 <__aeabi_i2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe fd53 	bl	80001c8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f8bb 	bl	80008a4 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4a7e      	ldr	r2, [pc, #504]	; (800192c <TIM1_UP_TIM10_IRQHandler+0x27c>)
 8001732:	6013      	str	r3, [r2, #0]
	S[0]=Kg[0]*(x[0]-xei);
 8001734:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 800173c:	edd3 6a00 	vldr	s13, [r3]
 8001740:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <TIM1_UP_TIM10_IRQHandler+0x284>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8001750:	edc3 7a00 	vstr	s15, [r3]
	S[1]=Kg[1]*(x[1]-xev)+integral;
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8001756:	ed93 7a01 	vldr	s14, [r3, #4]
 800175a:	4b70      	ldr	r3, [pc, #448]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 800175c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <TIM1_UP_TIM10_IRQHandler+0x270>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800176a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <TIM1_UP_TIM10_IRQHandler+0x27c>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800177a:	edc3 7a01 	vstr	s15, [r3, #4]

	//duty cicle
	u[0]=(-(pwm*S[0])+1)*0.5;
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <TIM1_UP_TIM10_IRQHandler+0x264>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178a:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80017a6:	edc3 7a00 	vstr	s15, [r3]
	if (u[0]>0.4)
 80017aa:	4b64      	ldr	r3, [pc, #400]	; (800193c <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe ff98 	bl	80006e4 <__aeabi_f2d>
 80017b4:	a354      	add	r3, pc, #336	; (adr r3, 8001908 <TIM1_UP_TIM10_IRQHandler+0x258>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7ff f869 	bl	8000890 <__aeabi_dcmpgt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <TIM1_UP_TIM10_IRQHandler+0x11c>
	{
		sigma=1;
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <TIM1_UP_TIM10_IRQHandler+0x290>)
 80017c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017ca:	601a      	str	r2, [r3, #0]
	}
	if (u[0]<0.4)
 80017cc:	4b5b      	ldr	r3, [pc, #364]	; (800193c <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff87 	bl	80006e4 <__aeabi_f2d>
 80017d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001908 <TIM1_UP_TIM10_IRQHandler+0x258>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f83a 	bl	8000854 <__aeabi_dcmplt>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <TIM1_UP_TIM10_IRQHandler+0x13e>
	{
		sigma=0;
 80017e6:	4b56      	ldr	r3, [pc, #344]	; (8001940 <TIM1_UP_TIM10_IRQHandler+0x290>)
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
	}

	Duty=u[0]*100; // Transforma pro range definido
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001944 <TIM1_UP_TIM10_IRQHandler+0x294>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 80017fe:	edc3 7a00 	vstr	s15, [r3]
		// Limita o duty-cyle de 0 a 100%
		if (Duty>90)
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800194c <TIM1_UP_TIM10_IRQHandler+0x29c>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd02      	ble.n	800181c <TIM1_UP_TIM10_IRQHandler+0x16c>
		{
		d=98;
 8001816:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 800181a:	601a      	str	r2, [r3, #0]
		}
		if (Duty<1)
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d503      	bpl.n	8001838 <TIM1_UP_TIM10_IRQHandler+0x188>
		{
		d=0;
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		}
		if (Duty>1 && Duty<90)
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd0d      	ble.n	8001868 <TIM1_UP_TIM10_IRQHandler+0x1b8>
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800194c <TIM1_UP_TIM10_IRQHandler+0x29c>
 8001856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d503      	bpl.n	8001868 <TIM1_UP_TIM10_IRQHandler+0x1b8>
		{
			d=Duty;
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <TIM1_UP_TIM10_IRQHandler+0x298>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a3a      	ldr	r2, [pc, #232]	; (8001950 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8001866:	6013      	str	r3, [r2, #0]
		}
		// Envia o sinal PWM
		TIM8->CCR4 = d; //Duty=CCR/ARR
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8001870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001874:	ee17 2a90 	vmov	r2, s15
 8001878:	641a      	str	r2, [r3, #64]	; 0x40

//______________________Modelo do Conversor Boost______________________//
	// Faz a Leitura do Estado
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)==1) //Se estado PWM alto
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4824      	ldr	r0, [pc, #144]	; (8001910 <TIM1_UP_TIM10_IRQHandler+0x260>)
 800187e:	f000 fcbf 	bl	8002200 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d171      	bne.n	800196c <TIM1_UP_TIM10_IRQHandler+0x2bc>
	{
	x_dot[0]=A1[0][0]*x[0]+A1[0][1]*x[1]+B1[0]*Vs; //Calculo iL
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 800189a:	edd3 6a01 	vldr	s13, [r3, #4]
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80018a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80018ae:	edd3 6a00 	vldr	s13, [r3]
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
	x_dot[1]=A1[1][0]*x[0]+A1[1][1]*x[1]+B1[1]*Vs; //Calculo vC
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80018c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80018d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80018de:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80018ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8001900:	edc3 7a01 	vstr	s15, [r3, #4]
 8001904:	e070      	b.n	80019e8 <TIM1_UP_TIM10_IRQHandler+0x338>
 8001906:	bf00      	nop
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fd99999 	.word	0x3fd99999
 8001910:	40020800 	.word	0x40020800
 8001914:	2000029c 	.word	0x2000029c
 8001918:	200002b8 	.word	0x200002b8
 800191c:	20000294 	.word	0x20000294
 8001920:	2000001c 	.word	0x2000001c
 8001924:	20000030 	.word	0x20000030
 8001928:	20000028 	.word	0x20000028
 800192c:	200002b4 	.word	0x200002b4
 8001930:	20000020 	.word	0x20000020
 8001934:	20000018 	.word	0x20000018
 8001938:	200002a0 	.word	0x200002a0
 800193c:	200002a8 	.word	0x200002a8
 8001940:	200002b0 	.word	0x200002b0
 8001944:	42c80000 	.word	0x42c80000
 8001948:	200002c0 	.word	0x200002c0
 800194c:	42b40000 	.word	0x42b40000
 8001950:	200002c4 	.word	0x200002c4
 8001954:	42c40000 	.word	0x42c40000
 8001958:	40010400 	.word	0x40010400
 800195c:	2000025c 	.word	0x2000025c
 8001960:	2000026c 	.word	0x2000026c
 8001964:	20000000 	.word	0x20000000
 8001968:	2000028c 	.word	0x2000028c
	}
	else { //Se estado PWM baixo
	x_dot[0]=A2[0][0]*x[0]+A2[0][1]*x[1]+B2[0]*Vs; //Calculo iL
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 800197e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001984:	edd3 7a01 	vldr	s15, [r3, #4]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <TIM1_UP_TIM10_IRQHandler+0x3b4>)
 8001992:	edd3 6a00 	vldr	s13, [r3]
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <TIM1_UP_TIM10_IRQHandler+0x3b8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	x_dot[1]=A2[1][0]*x[0]+A2[1][1]*x[1]+B2[1]*Vs; //Calculo vC
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 80019ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 80019bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 80019c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <TIM1_UP_TIM10_IRQHandler+0x3b4>)
 80019d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <TIM1_UP_TIM10_IRQHandler+0x3b8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 80019e4:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	x[0]=x[0]+Ts*x_dot[0];
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 80019f0:	edd3 6a00 	vldr	s13, [r3]
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <TIM1_UP_TIM10_IRQHandler+0x3c0>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a04:	edc3 7a00 	vstr	s15, [r3]
	x[1]=x[1]+Ts*x_dot[1];
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 8001a10:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <TIM1_UP_TIM10_IRQHandler+0x3c0>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a24:	edc3 7a01 	vstr	s15, [r3, #4]
	if (x[0]<0){
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	d503      	bpl.n	8001a40 <TIM1_UP_TIM10_IRQHandler+0x390>
	x[0]=0;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
	}
	iL=x[0]; // Corrente
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <TIM1_UP_TIM10_IRQHandler+0x3c4>)
 8001a46:	6013      	str	r3, [r2, #0]
	vC=x[1]; // Tens~ao
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8001a4e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <TIM1_UP_TIM10_IRQHandler+0x3cc>)
 8001a52:	f003 fe23 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000274 	.word	0x20000274
 8001a60:	20000294 	.word	0x20000294
 8001a64:	20000284 	.word	0x20000284
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	2000028c 	.word	0x2000028c
 8001a70:	20000014 	.word	0x20000014
 8001a74:	20000254 	.word	0x20000254
 8001a78:	20000258 	.word	0x20000258
 8001a7c:	2000020c 	.word	0x2000020c

08001a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <OTG_FS_IRQHandler+0x10>)
 8001a86:	f000 fe57 	bl	8002738 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200006ac 	.word	0x200006ac

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f008 f852 	bl	8009b6c <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	200002c8 	.word	0x200002c8
 8001afc:	20000af8 	.word	0x20000af8

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f008 f811 	bl	8009b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff f873 	bl	8000c40 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001b68:	08009ca0 	.word	0x08009ca0
  ldr r2, =_sbss
 8001b6c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001b70:	20000af8 	.word	0x20000af8

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fba4 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000038 	.word	0x20000038
 8001c14:	20000040 	.word	0x20000040
 8001c18:	2000003c 	.word	0x2000003c

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000040 	.word	0x20000040
 8001c40:	200002cc 	.word	0x200002cc

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200002cc 	.word	0x200002cc

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000040 	.word	0x20000040

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e16b      	b.n	80021bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 815a 	bne.w	80021b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d130      	bne.n	8001f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b4 	beq.w	80021b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_GPIO_Init+0x310>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x314>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <HAL_GPIO_Init+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_GPIO_Init+0x31c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_GPIO_Init+0x320>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	; (80021ec <HAL_GPIO_Init+0x324>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_GPIO_Init+0x328>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x310>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_GPIO_Init+0x334>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_GPIO_Init+0x334>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae90 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002264:	b08f      	sub	sp, #60	; 0x3c
 8002266:	af0a      	add	r7, sp, #40	; 0x28
 8002268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e054      	b.n	800231e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f007 f8ee 	bl	8009470 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f91a 	bl	80064ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	687e      	ldr	r6, [r7, #4]
 80022c0:	466d      	mov	r5, sp
 80022c2:	f106 0410 	add.w	r4, r6, #16
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d6:	1d33      	adds	r3, r6, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f004 f894 	bl	8006408 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f911 	bl	800650e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	687e      	ldr	r6, [r7, #4]
 80022f4:	466d      	mov	r5, sp
 80022f6:	f106 0410 	add.w	r4, r6, #16
 80022fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002306:	e885 0003 	stmia.w	r5, {r0, r1}
 800230a:	1d33      	adds	r3, r6, #4
 800230c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	f004 fa9a 	bl	8006848 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002326 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002326:	b590      	push	{r4, r7, lr}
 8002328:	b089      	sub	sp, #36	; 0x24
 800232a:	af04      	add	r7, sp, #16
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	4608      	mov	r0, r1
 8002330:	4611      	mov	r1, r2
 8002332:	461a      	mov	r2, r3
 8002334:	4603      	mov	r3, r0
 8002336:	70fb      	strb	r3, [r7, #3]
 8002338:	460b      	mov	r3, r1
 800233a:	70bb      	strb	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_HCD_HC_Init+0x28>
 800234a:	2302      	movs	r3, #2
 800234c:	e076      	b.n	800243c <HAL_HCD_HC_Init+0x116>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	333d      	adds	r3, #61	; 0x3d
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3338      	adds	r3, #56	; 0x38
 8002376:	787a      	ldrb	r2, [r7, #1]
 8002378:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3340      	adds	r3, #64	; 0x40
 8002388:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800238a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3339      	adds	r3, #57	; 0x39
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	333f      	adds	r3, #63	; 0x3f
 80023ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	78ba      	ldrb	r2, [r7, #2]
 80023b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ba:	b2d0      	uxtb	r0, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	333a      	adds	r3, #58	; 0x3a
 80023c8:	4602      	mov	r2, r0
 80023ca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da09      	bge.n	80023e8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	333b      	adds	r3, #59	; 0x3b
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e008      	b.n	80023fa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	333b      	adds	r3, #59	; 0x3b
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	333c      	adds	r3, #60	; 0x3c
 8002408:	f897 2020 	ldrb.w	r2, [r7, #32]
 800240c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	787c      	ldrb	r4, [r7, #1]
 8002414:	78ba      	ldrb	r2, [r7, #2]
 8002416:	78f9      	ldrb	r1, [r7, #3]
 8002418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4623      	mov	r3, r4
 800242a:	f004 fb93 	bl	8006b54 <USB_HC_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}

08002444 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_HCD_HC_Halt+0x1e>
 800245e:	2302      	movs	r3, #2
 8002460:	e00f      	b.n	8002482 <HAL_HCD_HC_Halt+0x3e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fde3 	bl	800703e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	460b      	mov	r3, r1
 80024a0:	70bb      	strb	r3, [r7, #2]
 80024a2:	4613      	mov	r3, r2
 80024a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	333b      	adds	r3, #59	; 0x3b
 80024b4:	78ba      	ldrb	r2, [r7, #2]
 80024b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	333f      	adds	r3, #63	; 0x3f
 80024c6:	787a      	ldrb	r2, [r7, #1]
 80024c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024ca:	7c3b      	ldrb	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d112      	bne.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3342      	adds	r3, #66	; 0x42
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	333d      	adds	r3, #61	; 0x3d
 80024f0:	7f3a      	ldrb	r2, [r7, #28]
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e008      	b.n	8002508 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3342      	adds	r3, #66	; 0x42
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b03      	cmp	r3, #3
 800250c:	f200 80c6 	bhi.w	800269c <HAL_HCD_HC_SubmitRequest+0x210>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	08002689 	.word	0x08002689
 8002520:	0800258d 	.word	0x0800258d
 8002524:	0800260b 	.word	0x0800260b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002528:	7c3b      	ldrb	r3, [r7, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	f040 80b8 	bne.w	80026a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80b4 	bne.w	80026a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002538:	8b3b      	ldrh	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3355      	adds	r3, #85	; 0x55
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3355      	adds	r3, #85	; 0x55
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3342      	adds	r3, #66	; 0x42
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002576:	e093      	b.n	80026a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3342      	adds	r3, #66	; 0x42
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      break;
 800258a:	e089      	b.n	80026a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800258c:	78bb      	ldrb	r3, [r7, #2]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11d      	bne.n	80025ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3355      	adds	r3, #85	; 0x55
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3342      	adds	r3, #66	; 0x42
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025b8:	e073      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3342      	adds	r3, #66	; 0x42
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
      break;
 80025cc:	e069      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3354      	adds	r3, #84	; 0x54
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e055      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3342      	adds	r3, #66	; 0x42
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
      break;
 8002608:	e04b      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800260a:	78bb      	ldrb	r3, [r7, #2]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11d      	bne.n	800264c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3355      	adds	r3, #85	; 0x55
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3342      	adds	r3, #66	; 0x42
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002636:	e034      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3342      	adds	r3, #66	; 0x42
 8002646:	2202      	movs	r2, #2
 8002648:	701a      	strb	r2, [r3, #0]
      break;
 800264a:	e02a      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3354      	adds	r3, #84	; 0x54
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3342      	adds	r3, #66	; 0x42
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
      break;
 8002672:	e016      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3342      	adds	r3, #66	; 0x42
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e00c      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3342      	adds	r3, #66	; 0x42
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3344      	adds	r3, #68	; 0x44
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	8b3a      	ldrh	r2, [r7, #24]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	202c      	movs	r0, #44	; 0x2c
 80026bc:	fb00 f303 	mul.w	r3, r0, r3
 80026c0:	440b      	add	r3, r1
 80026c2:	334c      	adds	r3, #76	; 0x4c
 80026c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3360      	adds	r3, #96	; 0x60
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3350      	adds	r3, #80	; 0x50
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3339      	adds	r3, #57	; 0x39
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3361      	adds	r3, #97	; 0x61
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	222c      	movs	r2, #44	; 0x2c
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	3338      	adds	r3, #56	; 0x38
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	18d1      	adds	r1, r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	f004 fb36 	bl	8006d98 <USB_HC_StartXfer>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f004 f837 	bl	80067c2 <USB_GetMode>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	f040 80f6 	bne.w	8002948 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f004 f81b 	bl	800679c <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80ec 	beq.w	8002946 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f812 	bl	800679c <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002782:	d104      	bne.n	800278e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800278c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 f802 	bl	800679c <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a2:	d104      	bne.n	80027ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fff2 	bl	800679c <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c2:	d104      	bne.n	80027ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 ffe2 	bl	800679c <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d103      	bne.n	80027ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2202      	movs	r2, #2
 80027e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 ffd4 	bl	800679c <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027fe:	d11c      	bne.n	800283a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002808:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800281a:	2110      	movs	r1, #16
 800281c:	6938      	ldr	r0, [r7, #16]
 800281e:	f003 fec3 	bl	80065a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002822:	6938      	ldr	r0, [r7, #16]
 8002824:	f003 fef4 	bl	8006610 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f004 f8ca 	bl	80069c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f006 fe99 	bl	800956c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 ffac 	bl	800679c <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284e:	d102      	bne.n	8002856 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f001 f89e 	bl	8003992 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 ff9e 	bl	800679c <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b08      	cmp	r3, #8
 8002868:	d106      	bne.n	8002878 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f006 fe62 	bl	8009534 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2208      	movs	r2, #8
 8002876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ff8d 	bl	800679c <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d101      	bne.n	8002890 <HAL_HCD_IRQHandler+0x158>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_HCD_IRQHandler+0x15a>
 8002890:	2300      	movs	r3, #0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0210 	bic.w	r2, r2, #16
 80028a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 ffa1 	bl	80037ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0210 	orr.w	r2, r2, #16
 80028ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 ff6b 	bl	800679c <USB_ReadInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028d0:	d13a      	bne.n	8002948 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fba0 	bl	800701c <USB_HC_ReadInterrupt>
 80028dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e025      	b.n	8002930 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d018      	beq.n	800292a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d106      	bne.n	800291e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8ab 	bl	8002a72 <HCD_HC_IN_IRQHandler>
 800291c:	e005      	b.n	800292a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fbf9 	bl	800311c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3d4      	bcc.n	80028e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002942:	615a      	str	r2, [r3, #20]
 8002944:	e000      	b.n	8002948 <HAL_HCD_IRQHandler+0x210>
      return;
 8002946:	bf00      	nop
    }
  }
}
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_HCD_Start+0x16>
 8002960:	2302      	movs	r3, #2
 8002962:	e013      	b.n	800298c <HAL_HCD_Start+0x3e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f004 f88c 	bl	8006a90 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 fda4 	bl	80064ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_HCD_Stop+0x16>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e00d      	b.n	80029c6 <HAL_HCD_Stop+0x32>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 fc7a 	bl	80072b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f82e 	bl	8006a3c <USB_ResetPort>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3360      	adds	r3, #96	; 0x60
 8002a04:	781b      	ldrb	r3, [r3, #0]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3350      	adds	r3, #80	; 0x50
 8002a2c:	681b      	ldr	r3, [r3, #0]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 f872 	bl	8006b30 <USB_GetCurrentFrame>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f84d 	bl	8006b02 <USB_GetHostSpeed>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d11a      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fab4 	bl	800703e <USB_HC_Halt>
 8002ad6:	e0af      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d11b      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	2207      	movs	r2, #7
 8002b14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fa8c 	bl	800703e <USB_HC_Halt>
 8002b26:	e087      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d109      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	e072      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11a      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2308      	movs	r3, #8
 8002b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3361      	adds	r3, #97	; 0x61
 8002b88:	2205      	movs	r2, #5
 8002b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fa51 	bl	800703e <USB_HC_Halt>
 8002b9c:	e04c      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d11b      	bne.n	8002bee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3361      	adds	r3, #97	; 0x61
 8002bd8:	2208      	movs	r2, #8
 8002bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fa29 	bl	800703e <USB_HC_Halt>
 8002bec:	e024      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d119      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3361      	adds	r3, #97	; 0x61
 8002c24:	2206      	movs	r2, #6
 8002c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fa03 	bl	800703e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c4e:	d112      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f9ef 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c74:	e24e      	b.n	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	f040 80df 	bne.w	8002e4c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d019      	beq.n	8002cca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3348      	adds	r3, #72	; 0x48
 8002ca4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0159      	lsls	r1, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cb8:	1ad2      	subs	r2, r2, r3
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	202c      	movs	r0, #44	; 0x2c
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3350      	adds	r3, #80	; 0x50
 8002cc8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3361      	adds	r3, #97	; 0x61
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	335c      	adds	r3, #92	; 0x5c
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	333f      	adds	r3, #63	; 0x3f
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	333f      	adds	r3, #63	; 0x3f
 8002d22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d111      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 f983 	bl	800703e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2310      	movs	r3, #16
 8002d48:	6093      	str	r3, [r2, #8]
 8002d4a:	e03a      	b.n	8002dc2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	333f      	adds	r3, #63	; 0x3f
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d009      	beq.n	8002d74 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	333f      	adds	r3, #63	; 0x3f
 8002d6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d126      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	0151      	lsls	r1, r2, #5
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	440a      	add	r2, r1
 8002d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d92:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	b2d9      	uxtb	r1, r3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	202c      	movs	r0, #44	; 0x2c
 8002db0:	fb00 f303 	mul.w	r3, r0, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3360      	adds	r3, #96	; 0x60
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f006 fbe3 	bl	8009588 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d12b      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3348      	adds	r3, #72	; 0x48
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	202c      	movs	r0, #44	; 0x2c
 8002de0:	fb00 f202 	mul.w	r2, r0, r2
 8002de4:	440a      	add	r2, r1
 8002de6:	3240      	adds	r2, #64	; 0x40
 8002de8:	8812      	ldrh	r2, [r2, #0]
 8002dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 818e 	beq.w	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3354      	adds	r3, #84	; 0x54
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2d8      	uxtb	r0, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3354      	adds	r3, #84	; 0x54
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	701a      	strb	r2, [r3, #0]
}
 8002e20:	e178      	b.n	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3354      	adds	r3, #84	; 0x54
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2d8      	uxtb	r0, r3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3354      	adds	r3, #84	; 0x54
 8002e46:	4602      	mov	r2, r0
 8002e48:	701a      	strb	r2, [r3, #0]
}
 8002e4a:	e163      	b.n	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	f040 80f6 	bne.w	8003050 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d109      	bne.n	8002e8c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e0c9      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3361      	adds	r3, #97	; 0x61
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d109      	bne.n	8002eb4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	2205      	movs	r2, #5
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e0b5      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3361      	adds	r3, #97	; 0x61
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d009      	beq.n	8002edc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3361      	adds	r3, #97	; 0x61
 8002ed6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d150      	bne.n	8002f7e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	335c      	adds	r3, #92	; 0x5c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	202c      	movs	r0, #44	; 0x2c
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	440b      	add	r3, r1
 8002efa:	335c      	adds	r3, #92	; 0x5c
 8002efc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	335c      	adds	r3, #92	; 0x5c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d912      	bls.n	8002f38 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	335c      	adds	r3, #92	; 0x5c
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3360      	adds	r3, #96	; 0x60
 8002f32:	2204      	movs	r2, #4
 8002f34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f36:	e073      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3360      	adds	r3, #96	; 0x60
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f60:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f68:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f7c:	e050      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3361      	adds	r3, #97	; 0x61
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d122      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3360      	adds	r3, #96	; 0x60
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e023      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3361      	adds	r3, #97	; 0x61
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d119      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	202c      	movs	r0, #44	; 0x2c
 8003004:	fb00 f303 	mul.w	r3, r0, r3
 8003008:	440b      	add	r3, r1
 800300a:	335c      	adds	r3, #92	; 0x5c
 800300c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3360      	adds	r3, #96	; 0x60
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2302      	movs	r3, #2
 8003030:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	202c      	movs	r0, #44	; 0x2c
 800303c:	fb00 f303 	mul.w	r3, r0, r3
 8003040:	4413      	add	r3, r2
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f006 fa9d 	bl	8009588 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800304e:	e061      	b.n	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b10      	cmp	r3, #16
 8003064:	d156      	bne.n	8003114 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d111      	bne.n	800309e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	335c      	adds	r3, #92	; 0x5c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ffd1 	bl	800703e <USB_HC_Halt>
 800309c:	e031      	b.n	8003102 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	333f      	adds	r3, #63	; 0x3f
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	333f      	adds	r3, #63	; 0x3f
 80030c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d11d      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d110      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	2203      	movs	r2, #3
 80030f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 ff9e 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2310      	movs	r3, #16
 8003112:	6093      	str	r3, [r2, #8]
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11a      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	2304      	movs	r3, #4
 800315c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2206      	movs	r2, #6
 800316e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 ff5f 	bl	800703e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003180:	e331      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b20      	cmp	r3, #32
 8003196:	d12e      	bne.n	80031f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	461a      	mov	r2, r3
 80031a6:	2320      	movs	r3, #32
 80031a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	333d      	adds	r3, #61	; 0x3d
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	f040 8313 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	333d      	adds	r3, #61	; 0x3d
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 ff25 	bl	800703e <USB_HC_Halt>
}
 80031f4:	e2f7      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d112      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	461a      	mov	r2, r3
 800321c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003220:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f003 ff06 	bl	800703e <USB_HC_Halt>
}
 8003232:	e2d8      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d140      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d111      	bne.n	8003296 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	333d      	adds	r3, #61	; 0x3d
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	461a      	mov	r2, r3
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	461a      	mov	r2, r3
 80032a4:	2301      	movs	r3, #1
 80032a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3361      	adds	r3, #97	; 0x61
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 feba 	bl	800703e <USB_HC_Halt>
}
 80032ca:	e28c      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d12c      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3361      	adds	r3, #97	; 0x61
 80032f0:	2204      	movs	r2, #4
 80032f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	333d      	adds	r3, #61	; 0x3d
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fe8b 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	6093      	str	r3, [r2, #8]
}
 800333a:	e254      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11a      	bne.n	8003388 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	461a      	mov	r2, r3
 8003360:	2308      	movs	r3, #8
 8003362:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3361      	adds	r3, #97	; 0x61
 8003372:	2205      	movs	r2, #5
 8003374:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fe5c 	bl	800703e <USB_HC_Halt>
}
 8003386:	e22e      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d140      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3361      	adds	r3, #97	; 0x61
 80033be:	2203      	movs	r2, #3
 80033c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	333d      	adds	r3, #61	; 0x3d
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d112      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	333c      	adds	r3, #60	; 0x3c
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	333d      	adds	r3, #61	; 0x3d
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fe19 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	2310      	movs	r3, #16
 800341c:	6093      	str	r3, [r2, #8]
}
 800341e:	e1e2      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d164      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d111      	bne.n	8003462 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3361      	adds	r3, #97	; 0x61
 800344c:	2206      	movs	r2, #6
 800344e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fdef 	bl	800703e <USB_HC_Halt>
 8003460:	e044      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	335c      	adds	r3, #92	; 0x5c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	202c      	movs	r0, #44	; 0x2c
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	440b      	add	r3, r1
 8003480:	335c      	adds	r3, #92	; 0x5c
 8003482:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	335c      	adds	r3, #92	; 0x5c
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d920      	bls.n	80034da <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	335c      	adds	r3, #92	; 0x5c
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3360      	adds	r3, #96	; 0x60
 80034b8:	2204      	movs	r2, #4
 80034ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	202c      	movs	r0, #44	; 0x2c
 80034c6:	fb00 f303 	mul.w	r3, r0, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f006 f858 	bl	8009588 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d8:	e008      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3360      	adds	r3, #96	; 0x60
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	6093      	str	r3, [r2, #8]
}
 80034fe:	e172      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d11b      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3361      	adds	r3, #97	; 0x61
 8003526:	2208      	movs	r2, #8
 8003528:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fd82 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	461a      	mov	r2, r3
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	6093      	str	r3, [r2, #8]
}
 800354e:	e14a      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	f040 813f 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3361      	adds	r3, #97	; 0x61
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d17d      	bne.n	8003678 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3360      	adds	r3, #96	; 0x60
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	333f      	adds	r3, #63	; 0x3f
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d00a      	beq.n	80035b8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	333f      	adds	r3, #63	; 0x3f
 80035b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f040 8100 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d113      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3355      	adds	r3, #85	; 0x55
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3355      	adds	r3, #85	; 0x55
 80035e4:	4602      	mov	r2, r0
 80035e6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 80e3 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	334c      	adds	r3, #76	; 0x4c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80d8 	beq.w	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	334c      	adds	r3, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	202c      	movs	r0, #44	; 0x2c
 800361e:	fb00 f202 	mul.w	r2, r0, r2
 8003622:	440a      	add	r2, r1
 8003624:	3240      	adds	r2, #64	; 0x40
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	3b01      	subs	r3, #1
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	202c      	movs	r0, #44	; 0x2c
 8003632:	fb00 f202 	mul.w	r2, r0, r2
 8003636:	440a      	add	r2, r1
 8003638:	3240      	adds	r2, #64	; 0x40
 800363a:	8812      	ldrh	r2, [r2, #0]
 800363c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80b5 	beq.w	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3355      	adds	r3, #85	; 0x55
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2d8      	uxtb	r0, r3
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3355      	adds	r3, #85	; 0x55
 8003672:	4602      	mov	r2, r0
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e09f      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3361      	adds	r3, #97	; 0x61
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d109      	bne.n	80036a0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	2202      	movs	r2, #2
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e08b      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3361      	adds	r3, #97	; 0x61
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d109      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3360      	adds	r3, #96	; 0x60
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e077      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3361      	adds	r3, #97	; 0x61
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d109      	bne.n	80036f0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3360      	adds	r3, #96	; 0x60
 80036ea:	2205      	movs	r2, #5
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e063      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3361      	adds	r3, #97	; 0x61
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d009      	beq.n	8003718 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3361      	adds	r3, #97	; 0x61
 8003712:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003714:	2b08      	cmp	r3, #8
 8003716:	d14f      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	335c      	adds	r3, #92	; 0x5c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	440b      	add	r3, r1
 8003736:	335c      	adds	r3, #92	; 0x5c
 8003738:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	335c      	adds	r3, #92	; 0x5c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d912      	bls.n	8003774 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	335c      	adds	r3, #92	; 0x5c
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3360      	adds	r3, #96	; 0x60
 800376e:	2204      	movs	r2, #4
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e021      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3360      	adds	r3, #96	; 0x60
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800379c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2302      	movs	r3, #2
 80037c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	b2d9      	uxtb	r1, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	202c      	movs	r0, #44	; 0x2c
 80037d4:	fb00 f303 	mul.w	r3, r0, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3360      	adds	r3, #96	; 0x60
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f005 fed1 	bl	8009588 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037e6:	bf00      	nop
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	; 0x28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	0c5b      	lsrs	r3, r3, #17
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003822:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d004      	beq.n	8003834 <HCD_RXQLVL_IRQHandler+0x46>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b05      	cmp	r3, #5
 800382e:	f000 80a9 	beq.w	8003984 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003832:	e0aa      	b.n	800398a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80a6 	beq.w	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3344      	adds	r3, #68	; 0x44
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 809b 	beq.w	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3350      	adds	r3, #80	; 0x50
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	441a      	add	r2, r3
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	202c      	movs	r0, #44	; 0x2c
 800386c:	fb00 f303 	mul.w	r3, r0, r3
 8003870:	440b      	add	r3, r1
 8003872:	334c      	adds	r3, #76	; 0x4c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d87a      	bhi.n	8003970 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3344      	adds	r3, #68	; 0x44
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	b292      	uxth	r2, r2
 8003892:	4619      	mov	r1, r3
 8003894:	f002 ff2a 	bl	80066ec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3344      	adds	r3, #68	; 0x44
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	441a      	add	r2, r3
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	202c      	movs	r0, #44	; 0x2c
 80038b2:	fb00 f303 	mul.w	r3, r0, r3
 80038b6:	440b      	add	r3, r1
 80038b8:	3344      	adds	r3, #68	; 0x44
 80038ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3350      	adds	r3, #80	; 0x50
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	441a      	add	r2, r3
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	202c      	movs	r0, #44	; 0x2c
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	440b      	add	r3, r1
 80038dc:	3350      	adds	r3, #80	; 0x50
 80038de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	0cdb      	lsrs	r3, r3, #19
 80038f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3340      	adds	r3, #64	; 0x40
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4293      	cmp	r3, r2
 800390c:	d13c      	bne.n	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d039      	beq.n	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800392a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003932:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3354      	adds	r3, #84	; 0x54
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2d8      	uxtb	r0, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3354      	adds	r3, #84	; 0x54
 800396a:	4602      	mov	r2, r0
 800396c:	701a      	strb	r2, [r3, #0]
      break;
 800396e:	e00b      	b.n	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3360      	adds	r3, #96	; 0x60
 800397e:	2204      	movs	r2, #4
 8003980:	701a      	strb	r2, [r3, #0]
      break;
 8003982:	e001      	b.n	8003988 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003988:	bf00      	nop
  }
}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d10b      	bne.n	80039e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f005 fdbb 	bl	8009550 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d132      	bne.n	8003a52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f043 0308 	orr.w	r3, r3, #8
 80039f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d126      	bne.n	8003a4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d113      	bne.n	8003a2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a10:	d106      	bne.n	8003a20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 ffd5 	bl	80069c8 <USB_InitFSLSPClkSel>
 8003a1e:	e011      	b.n	8003a44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 ffce 	bl	80069c8 <USB_InitFSLSPClkSel>
 8003a2c:	e00a      	b.n	8003a44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f005 fdad 	bl	80095a4 <HAL_HCD_PortEnabled_Callback>
 8003a4a:	e002      	b.n	8003a52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 fdb7 	bl	80095c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d103      	bne.n	8003a64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f043 0320 	orr.w	r3, r3, #32
 8003a62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e12b      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fc52 	bl	8001348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003adc:	f001 fa20 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a81      	ldr	r2, [pc, #516]	; (8003cec <HAL_I2C_Init+0x274>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d807      	bhi.n	8003afc <HAL_I2C_Init+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_I2C_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e006      	b.n	8003b0a <HAL_I2C_Init+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a7d      	ldr	r2, [pc, #500]	; (8003cf4 <HAL_I2C_Init+0x27c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bf94      	ite	ls
 8003b04:	2301      	movls	r3, #1
 8003b06:	2300      	movhi	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0e7      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a78      	ldr	r2, [pc, #480]	; (8003cf8 <HAL_I2C_Init+0x280>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <HAL_I2C_Init+0x274>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d802      	bhi.n	8003b4c <HAL_I2C_Init+0xd4>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	e009      	b.n	8003b60 <HAL_I2C_Init+0xe8>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_I2C_Init+0x284>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	495c      	ldr	r1, [pc, #368]	; (8003cec <HAL_I2C_Init+0x274>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d819      	bhi.n	8003bb4 <HAL_I2C_Init+0x13c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e59      	subs	r1, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b94:	400b      	ands	r3, r1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_I2C_Init+0x138>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e59      	subs	r1, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	e051      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e04f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_I2C_Init+0x168>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_Init+0x18e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Init+0x196>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_I2C_Init+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e58      	subs	r0, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	6809      	ldr	r1, [r1, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6911      	ldr	r1, [r2, #16]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000186a0 	.word	0x000186a0
 8003cf0:	001e847f 	.word	0x001e847f
 8003cf4:	003d08ff 	.word	0x003d08ff
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e128      	b.n	8003f64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a90      	ldr	r2, [pc, #576]	; (8003f6c <HAL_I2S_Init+0x26c>)
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fd fb53 	bl	80013d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2202      	movs	r2, #2
 8003d54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d060      	beq.n	8003e20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d66:	2310      	movs	r3, #16
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e001      	b.n	8003d70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d802      	bhi.n	8003d7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f001 f9c4 	bl	800510c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d84:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8e:	d125      	bne.n	8003ddc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	3305      	adds	r3, #5
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e01f      	b.n	8003dfa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	3305      	adds	r3, #5
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e00e      	b.n	8003dfa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	3305      	adds	r3, #5
 8003df8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4a5c      	ldr	r2, [pc, #368]	; (8003f70 <HAL_I2S_Init+0x270>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	08db      	lsrs	r3, r3, #3
 8003e04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e003      	b.n	8003e28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e20:	2302      	movs	r3, #2
 8003e22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d902      	bls.n	8003e34 <HAL_I2S_Init+0x134>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2bff      	cmp	r3, #255	; 0xff
 8003e32:	d907      	bls.n	8003e44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e08f      	b.n	8003f64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	ea42 0103 	orr.w	r1, r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6851      	ldr	r1, [r2, #4]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6892      	ldr	r2, [r2, #8]
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68d2      	ldr	r2, [r2, #12]
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6992      	ldr	r2, [r2, #24]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d161      	bne.n	8003f54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a38      	ldr	r2, [pc, #224]	; (8003f74 <HAL_I2S_Init+0x274>)
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a37      	ldr	r2, [pc, #220]	; (8003f78 <HAL_I2S_Init+0x278>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2S_Init+0x1a4>
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_I2S_Init+0x27c>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_I2S_Init+0x1a8>
 8003ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	4932      	ldr	r1, [pc, #200]	; (8003f78 <HAL_I2S_Init+0x278>)
 8003eb0:	428a      	cmp	r2, r1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2S_Init+0x1b8>
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_I2S_Init+0x27c>)
 8003eb6:	e001      	b.n	8003ebc <HAL_I2S_Init+0x1bc>
 8003eb8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ebc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <HAL_I2S_Init+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2S_Init+0x1d4>
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_I2S_Init+0x27c>)
 8003ed2:	e001      	b.n	8003ed8 <HAL_I2S_Init+0x1d8>
 8003ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed8:	2202      	movs	r2, #2
 8003eda:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <HAL_I2S_Init+0x278>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_I2S_Init+0x1ea>
 8003ee6:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_I2S_Init+0x27c>)
 8003ee8:	e001      	b.n	8003eee <HAL_I2S_Init+0x1ee>
 8003eea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d003      	beq.n	8003f04 <HAL_I2S_Init+0x204>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	e001      	b.n	8003f10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_I2S_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_I2S_Init+0x24c>
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_I2S_Init+0x27c>)
 8003f4a:	e001      	b.n	8003f50 <HAL_I2S_Init+0x250>
 8003f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f50:	897a      	ldrh	r2, [r7, #10]
 8003f52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	08004077 	.word	0x08004077
 8003f70:	cccccccd 	.word	0xcccccccd
 8003f74:	0800418d 	.word	0x0800418d
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	40003400 	.word	0x40003400

08003f80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10e      	bne.n	8004010 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ffb8 	bl	8003f80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	b292      	uxth	r2, r2
 800402c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10e      	bne.n	800406e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800405e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff93 	bl	8003f94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b04      	cmp	r3, #4
 8004090:	d13a      	bne.n	8004108 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d109      	bne.n	80040b0 <I2S_IRQHandler+0x3a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d102      	bne.n	80040b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ffb4 	bl	8004018 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d126      	bne.n	8004108 <I2S_IRQHandler+0x92>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d11f      	bne.n	8004108 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff50 	bl	8003fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b03      	cmp	r3, #3
 8004112:	d136      	bne.n	8004182 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d109      	bne.n	8004132 <I2S_IRQHandler+0xbc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d102      	bne.n	8004132 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff45 	bl	8003fbc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d122      	bne.n	8004182 <I2S_IRQHandler+0x10c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b20      	cmp	r3, #32
 8004148:	d11b      	bne.n	8004182 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004158:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	f043 0204 	orr.w	r2, r3, #4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff13 	bl	8003fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a92      	ldr	r2, [pc, #584]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041a6:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a8:	e001      	b.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a8b      	ldr	r2, [pc, #556]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041c4:	4b8a      	ldr	r3, [pc, #552]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c6:	e001      	b.n	80041cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d004      	beq.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 8099 	bne.w	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d107      	bne.n	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f925 	bl	8004448 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9c8 	bl	80045a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d13a      	bne.n	8004298 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d035      	beq.n	8004298 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004236:	4b6e      	ldr	r3, [pc, #440]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004238:	e001      	b.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4969      	ldr	r1, [pc, #420]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004246:	428b      	cmp	r3, r1
 8004248:	d101      	bne.n	800424e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800424a:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800424c:	e001      	b.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800424e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004252:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004256:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004266:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0202 	orr.w	r2, r3, #2
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fe88 	bl	8003fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	f040 80c3 	bne.w	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80bd 	beq.w	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a49      	ldr	r2, [pc, #292]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042cc:	e001      	b.n	80042d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4944      	ldr	r1, [pc, #272]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042da:	428b      	cmp	r3, r1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042de:	4b44      	ldr	r3, [pc, #272]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e0:	e001      	b.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f043 0204 	orr.w	r2, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe4a 	bl	8003fa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004314:	e089      	b.n	800442a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d107      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8be 	bl	80044ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d107      	bne.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8fd 	bl	8004544 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d12f      	bne.n	80043b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02a      	beq.n	80043b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800436c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437a:	e001      	b.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800437c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4919      	ldr	r1, [pc, #100]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d101      	bne.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800438e:	e001      	b.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004394:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004398:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fdfa 	bl	8003fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d136      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d031      	beq.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d4:	e001      	b.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4902      	ldr	r1, [pc, #8]	; (80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e2:	428b      	cmp	r3, r1
 80043e4:	d106      	bne.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043e6:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043e8:	e006      	b.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043ea:	bf00      	nop
 80043ec:	40003800 	.word	0x40003800
 80043f0:	40003400 	.word	0x40003400
 80043f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff fdc0 	bl	8003fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004428:	e000      	b.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800442a:	bf00      	nop
}
 800442c:	bf00      	nop
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c99      	adds	r1, r3, #2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6251      	str	r1, [r2, #36]	; 0x24
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d113      	bne.n	80044a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004488:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ffc9 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c99      	adds	r1, r3, #2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6251      	str	r1, [r2, #36]	; 0x24
 80044be:	8819      	ldrh	r1, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <I2SEx_TxISR_I2SExt+0x90>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <I2SEx_TxISR_I2SExt+0x22>
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <I2SEx_TxISR_I2SExt+0x94>)
 80044cc:	e001      	b.n	80044d2 <I2SEx_TxISR_I2SExt+0x26>
 80044ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d2:	460a      	mov	r2, r1
 80044d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d121      	bne.n	8004532 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <I2SEx_TxISR_I2SExt+0x90>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <I2SEx_TxISR_I2SExt+0x50>
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <I2SEx_TxISR_I2SExt+0x94>)
 80044fa:	e001      	b.n	8004500 <I2SEx_TxISR_I2SExt+0x54>
 80044fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <I2SEx_TxISR_I2SExt+0x90>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d101      	bne.n	8004510 <I2SEx_TxISR_I2SExt+0x64>
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <I2SEx_TxISR_I2SExt+0x94>)
 800450e:	e001      	b.n	8004514 <I2SEx_TxISR_I2SExt+0x68>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004518:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff81 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40003800 	.word	0x40003800
 8004540:	40003400 	.word	0x40003400

08004544 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68d8      	ldr	r0, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	1c99      	adds	r1, r3, #2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800455c:	b282      	uxth	r2, r0
 800455e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d113      	bne.n	80045a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004586:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ff4a 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a20      	ldr	r2, [pc, #128]	; (8004638 <I2SEx_RxISR_I2SExt+0x90>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <I2SEx_RxISR_I2SExt+0x16>
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <I2SEx_RxISR_I2SExt+0x94>)
 80045bc:	e001      	b.n	80045c2 <I2SEx_RxISR_I2SExt+0x1a>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c2:	68d8      	ldr	r0, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	1c99      	adds	r1, r3, #2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045ce:	b282      	uxth	r2, r0
 80045d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d121      	bne.n	800462e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <I2SEx_RxISR_I2SExt+0x90>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d101      	bne.n	80045f8 <I2SEx_RxISR_I2SExt+0x50>
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <I2SEx_RxISR_I2SExt+0x94>)
 80045f6:	e001      	b.n	80045fc <I2SEx_RxISR_I2SExt+0x54>
 80045f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	490d      	ldr	r1, [pc, #52]	; (8004638 <I2SEx_RxISR_I2SExt+0x90>)
 8004604:	428b      	cmp	r3, r1
 8004606:	d101      	bne.n	800460c <I2SEx_RxISR_I2SExt+0x64>
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <I2SEx_RxISR_I2SExt+0x94>)
 800460a:	e001      	b.n	8004610 <I2SEx_RxISR_I2SExt+0x68>
 800460c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004610:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004614:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff03 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40003800 	.word	0x40003800
 800463c:	40003400 	.word	0x40003400

08004640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e267      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d075      	beq.n	800474a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d112      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d10b      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <HAL_RCC_OscConfig+0x108>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e242      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x74>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6f      	ldr	r2, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a68      	ldr	r2, [pc, #416]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd faa4 	bl	8001c44 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fd faa0 	bl	8001c44 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e207      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xc0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fd fa90 	bl	8001c44 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd fa8c 	bl	8001c44 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1f3      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0xe8>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1c7      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4937      	ldr	r1, [pc, #220]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e03a      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b34      	ldr	r3, [pc, #208]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd fa45 	bl	8001c44 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047be:	f7fd fa41 	bl	8001c44 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1a8      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4925      	ldr	r1, [pc, #148]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fa24 	bl	8001c44 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004800:	f7fd fa20 	bl	8001c44 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e187      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd fa04 	bl	8001c44 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004840:	f7fd fa00 	bl	8001c44 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e167      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x200>
 800485e:	e01b      	b.n	8004898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fd f9ed 	bl	8001c44 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00e      	b.n	800488c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486e:	f7fd f9e9 	bl	8001c44 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d907      	bls.n	800488c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e150      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	42470000 	.word	0x42470000
 8004888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ea      	bne.n	800486e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8097 	beq.w	80049d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b81      	ldr	r3, [pc, #516]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b7d      	ldr	r3, [pc, #500]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a7c      	ldr	r2, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b77      	ldr	r3, [pc, #476]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b74      	ldr	r3, [pc, #464]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd f9a9 	bl	8001c44 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd f9a5 	bl	8001c44 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e10c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x2ea>
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
 8004928:	e01c      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x30c>
 8004932:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a5e      	ldr	r2, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a5b      	ldr	r2, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800494c:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a54      	ldr	r2, [pc, #336]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd f96a 	bl	8001c44 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd f966 	bl	8001c44 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0cb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ee      	beq.n	8004974 <HAL_RCC_OscConfig+0x334>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004998:	f7fd f954 	bl	8001c44 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fd f950 	bl	8001c44 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b5      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ee      	bne.n	80049a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a1 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d05c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d141      	bne.n	8004a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd f924 	bl	8001c44 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd f920 	bl	8001c44 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e087      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fd f8f9 	bl	8001c44 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fd f8f5 	bl	8001c44 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e05c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x416>
 8004a74:	e054      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd f8e2 	bl	8001c44 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd f8de 	bl	8001c44 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
 8004aa2:	e03d      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e038      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d121      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11a      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	3b01      	subs	r3, #1
 8004b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fd f810 	bl	8001c44 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fd f80c 	bl	8001c44 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc ff70 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	08009c78 	.word	0x08009c78
 8004cf4:	20000038 	.word	0x20000038
 8004cf8:	2000003c 	.word	0x2000003c

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b094      	sub	sp, #80	; 0x50
 8004d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
 8004d08:	2300      	movs	r3, #0
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x40>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f200 80e1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d2e:	e0db      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d34:	e0db      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b73      	ldr	r3, [pc, #460]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3a:	e0d8      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b6d      	ldr	r3, [pc, #436]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d80:	0150      	lsls	r0, r2, #5
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4621      	mov	r1, r4
 8004d88:	1a51      	subs	r1, r2, r1
 8004d8a:	6139      	str	r1, [r7, #16]
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da0:	4659      	mov	r1, fp
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004daa:	4651      	mov	r1, sl
 8004dac:	018a      	lsls	r2, r1, #6
 8004dae:	4651      	mov	r1, sl
 8004db0:	ebb2 0801 	subs.w	r8, r2, r1
 8004db4:	4659      	mov	r1, fp
 8004db6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	462b      	mov	r3, r5
 8004ddc:	eb49 0303 	adc.w	r3, r9, r3
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dee:	4629      	mov	r1, r5
 8004df0:	024b      	lsls	r3, r1, #9
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004df8:	4621      	mov	r1, r4
 8004dfa:	024a      	lsls	r2, r1, #9
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	2200      	movs	r2, #0
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0c:	f7fb fd9a 	bl	8000944 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	e058      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	4611      	mov	r1, r2
 8004e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e46:	0150      	lsls	r0, r2, #5
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e52:	4649      	mov	r1, r9
 8004e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e70:	eb63 050b 	sbc.w	r5, r3, fp
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb45 0303 	adc.w	r3, r5, r3
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec0:	f7fb fd40 	bl	8000944 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3750      	adds	r7, #80	; 0x50
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000038 	.word	0x20000038

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	08009c88 	.word	0x08009c88

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d035      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f70:	4b62      	ldr	r3, [pc, #392]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f76:	f7fc fe65 	bl	8001c44 <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f7e:	f7fc fe61 	bl	8001c44 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0b0      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f90:	4b5b      	ldr	r3, [pc, #364]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	019a      	lsls	r2, r3, #6
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	071b      	lsls	r3, r3, #28
 8004fa8:	4955      	ldr	r1, [pc, #340]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb0:	4b52      	ldr	r3, [pc, #328]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fc fe45 	bl	8001c44 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fbe:	f7fc fe41 	bl	8001c44 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e090      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8083 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a43      	ldr	r2, [pc, #268]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b41      	ldr	r3, [pc, #260]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005006:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3e      	ldr	r2, [pc, #248]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005012:	f7fc fe17 	bl	8001c44 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fc fe13 	bl	8001c44 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e062      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800502c:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005038:	4b31      	ldr	r3, [pc, #196]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005040:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02f      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d028      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005060:	4b29      	ldr	r3, [pc, #164]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005066:	4b28      	ldr	r3, [pc, #160]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800506c:	4a24      	ldr	r2, [pc, #144]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005072:	4b23      	ldr	r3, [pc, #140]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d114      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800507e:	f7fc fde1 	bl	8001c44 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fc fddd 	bl	8001c44 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e02a      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b4:	d10d      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	490d      	ldr	r1, [pc, #52]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	608b      	str	r3, [r1, #8]
 80050d0:	e005      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050dc:	6093      	str	r3, [r2, #8]
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	4905      	ldr	r1, [pc, #20]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	42470068 	.word	0x42470068
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
 8005108:	42470e40 	.word	0x42470e40

0800510c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d13e      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d12f      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005142:	617b      	str	r3, [r7, #20]
          break;
 8005144:	e02f      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005146:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005152:	d108      	bne.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005154:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	e007      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	0f1b      	lsrs	r3, r3, #28
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
          break;
 800519e:	e002      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
          break;
 80051a4:	bf00      	nop
        }
      }
      break;
 80051a6:	bf00      	nop
    }
  }
  return frequency;
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	00bb8000 	.word	0x00bb8000
 80051c0:	007a1200 	.word	0x007a1200
 80051c4:	00f42400 	.word	0x00f42400

080051c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07b      	b.n	80052d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ea:	d009      	beq.n	8005200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
 80051f2:	e005      	b.n	8005200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc f95c 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	ea42 0103 	orr.w	r1, r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0104 	and.w	r1, r3, #4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0210 	and.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e041      	b.n	8005370 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fc f931 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 fc83 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e04e      	b.n	800542e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a23      	ldr	r2, [pc, #140]	; (800543c <HAL_TIM_Base_Start_IT+0xc4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d01d      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_TIM_Base_Start_IT+0xc8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <HAL_TIM_Base_Start_IT+0xcc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <HAL_TIM_Base_Start_IT+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_TIM_Base_Start_IT+0xd4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a19      	ldr	r2, [pc, #100]	; (8005450 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x80>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_TIM_Base_Start_IT+0xdc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b06      	cmp	r3, #6
 8005408:	d010      	beq.n	800542c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541a:	e007      	b.n	800542c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40010400 	.word	0x40010400
 8005450:	40014000 	.word	0x40014000
 8005454:	40001800 	.word	0x40001800

08005458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e041      	b.n	80054ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f839 	bl	80054f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fbc4 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x24>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e022      	b.n	8005576 <HAL_TIM_PWM_Start+0x6a>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d109      	bne.n	800554a <HAL_TIM_PWM_Start+0x3e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e015      	b.n	8005576 <HAL_TIM_PWM_Start+0x6a>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d109      	bne.n	8005564 <HAL_TIM_PWM_Start+0x58>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e008      	b.n	8005576 <HAL_TIM_PWM_Start+0x6a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07c      	b.n	8005678 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start+0x82>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800558c:	e013      	b.n	80055b6 <HAL_TIM_PWM_Start+0xaa>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0x92>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	e00b      	b.n	80055b6 <HAL_TIM_PWM_Start+0xaa>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0xa2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ac:	e003      	b.n	80055b6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2201      	movs	r2, #1
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fe1a 	bl	80061f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <HAL_TIM_PWM_Start+0x174>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_PWM_Start+0xcc>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <HAL_TIM_PWM_Start+0x178>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_PWM_Start+0xd0>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HAL_TIM_PWM_Start+0xd2>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a22      	ldr	r2, [pc, #136]	; (8005680 <HAL_TIM_PWM_Start+0x174>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d01d      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_TIM_PWM_Start+0x17c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d018      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_TIM_PWM_Start+0x180>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_TIM_PWM_Start+0x184>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_TIM_PWM_Start+0x178>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <HAL_TIM_PWM_Start+0x188>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIM_PWM_Start+0x136>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <HAL_TIM_PWM_Start+0x18c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d111      	bne.n	8005666 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b06      	cmp	r3, #6
 8005652:	d010      	beq.n	8005676 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005664:	e007      	b.n	8005676 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0202 	mvn.w	r2, #2
 80056c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa81 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa73 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa84 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0204 	mvn.w	r2, #4
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa57 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa49 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa5a 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b08      	cmp	r3, #8
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa2d 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa1f 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa30 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2208      	movs	r2, #8
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa03 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9f5 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa06 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0201 	mvn.w	r2, #1
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9cf 	bl	8005bbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b80      	cmp	r3, #128	; 0x80
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fdd4 	bl	80063f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9cb 	bl	8005c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b20      	cmp	r3, #32
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0220 	mvn.w	r2, #32
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fd9e 	bl	80063e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0ae      	b.n	8005a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	f200 809f 	bhi.w	8005a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005915 	.word	0x08005915
 80058e4:	08005a19 	.word	0x08005a19
 80058e8:	08005a19 	.word	0x08005a19
 80058ec:	08005a19 	.word	0x08005a19
 80058f0:	08005955 	.word	0x08005955
 80058f4:	08005a19 	.word	0x08005a19
 80058f8:	08005a19 	.word	0x08005a19
 80058fc:	08005a19 	.word	0x08005a19
 8005900:	08005997 	.word	0x08005997
 8005904:	08005a19 	.word	0x08005a19
 8005908:	08005a19 	.word	0x08005a19
 800590c:	08005a19 	.word	0x08005a19
 8005910:	080059d7 	.word	0x080059d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fa22 	bl	8005d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0208 	orr.w	r2, r2, #8
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0204 	bic.w	r2, r2, #4
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	619a      	str	r2, [r3, #24]
      break;
 8005952:	e064      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fa72 	bl	8005e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6999      	ldr	r1, [r3, #24]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	619a      	str	r2, [r3, #24]
      break;
 8005994:	e043      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fac7 	bl	8005f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0208 	orr.w	r2, r2, #8
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0204 	bic.w	r2, r2, #4
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]
      break;
 80059d4:	e023      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fb1b 	bl	8006018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69d9      	ldr	r1, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	021a      	lsls	r2, r3, #8
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	61da      	str	r2, [r3, #28]
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_ConfigClockSource+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0b4      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x186>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a84:	d03e      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0xd4>
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8a:	f200 8087 	bhi.w	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a92:	f000 8086 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x172>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d87f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b70      	cmp	r3, #112	; 0x70
 8005a9e:	d01a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8005aa0:	2b70      	cmp	r3, #112	; 0x70
 8005aa2:	d87b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b60      	cmp	r3, #96	; 0x60
 8005aa6:	d050      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x11a>
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d877      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b50      	cmp	r3, #80	; 0x50
 8005aae:	d03c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0xfa>
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d873      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d058      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x13a>
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d86f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d064      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d86b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d060      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d867      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d05c      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d05a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad4:	e062      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6899      	ldr	r1, [r3, #8]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f000 fb67 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
      break;
 8005b02:	e04f      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6899      	ldr	r1, [r3, #8]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f000 fb50 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b26:	609a      	str	r2, [r3, #8]
      break;
 8005b28:	e03c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fac4 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2150      	movs	r1, #80	; 0x50
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb1d 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e02c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fae3 	bl	8006122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2160      	movs	r1, #96	; 0x60
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fb0d 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e01c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 faa4 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fafd 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b88:	e00c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f000 faf4 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d027      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40001800 	.word	0x40001800
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	40002000 	.word	0x40002000

08005d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0302 	bic.w	r3, r3, #2
 8005dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <TIM_OC1_SetConfig+0xd8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x64>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0308 	bic.w	r3, r3, #8
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0304 	bic.w	r3, r3, #4
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC1_SetConfig+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC1_SetConfig+0x8e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <TIM_OC1_SetConfig+0xdc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d111      	bne.n	8005e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0210 	bic.w	r2, r3, #16
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0320 	bic.w	r3, r3, #32
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <TIM_OC2_SetConfig+0xe4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC2_SetConfig+0x68>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <TIM_OC2_SetConfig+0xe8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10d      	bne.n	8005ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC2_SetConfig+0xe4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC2_SetConfig+0x94>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <TIM_OC2_SetConfig+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d113      	bne.n	8005f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400

08005f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <TIM_OC3_SetConfig+0xe0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC3_SetConfig+0x66>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a20      	ldr	r2, [pc, #128]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10d      	bne.n	8005fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC3_SetConfig+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x92>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d113      	bne.n	8005fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40010000 	.word	0x40010000
 8006014:	40010400 	.word	0x40010400

08006018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a12      	ldr	r2, [pc, #72]	; (80060bc <TIM_OC4_SetConfig+0xa4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC4_SetConfig+0x68>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <TIM_OC4_SetConfig+0xa8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d109      	bne.n	8006094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 030a 	bic.w	r3, r3, #10
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006122:	b480      	push	{r7}
 8006124:	b087      	sub	sp, #28
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	2201      	movs	r2, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e05a      	b.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a21      	ldr	r2, [pc, #132]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d01d      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a17      	ldr	r2, [pc, #92]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10c      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40010400 	.word	0x40010400
 8006334:	40014000 	.word	0x40014000
 8006338:	40001800 	.word	0x40001800

0800633c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006354:	2302      	movs	r3, #2
 8006356:	e03d      	b.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006408:	b084      	sub	sp, #16
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	f107 001c 	add.w	r0, r7, #28
 8006416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b01      	cmp	r3, #1
 800641e:	d122      	bne.n	8006466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9c0 	bl	80067e0 <USB_CoreReset>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e01a      	b.n	800649c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9b4 	bl	80067e0 <USB_CoreReset>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
 800648e:	e005      	b.n	800649c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10b      	bne.n	80064ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f043 0206 	orr.w	r2, r3, #6
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c6:	b004      	add	sp, #16
 80064c8:	4770      	bx	lr

080064ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f023 0201 	bic.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d115      	bne.n	800655c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800653c:	2001      	movs	r0, #1
 800653e:	f7fb fb8d 	bl	8001c5c <HAL_Delay>
      ms++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f93a 	bl	80067c2 <USB_GetMode>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d01e      	beq.n	8006592 <USB_SetCurrentMode+0x84>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b31      	cmp	r3, #49	; 0x31
 8006558:	d9f0      	bls.n	800653c <USB_SetCurrentMode+0x2e>
 800655a:	e01a      	b.n	8006592 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d115      	bne.n	800658e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800656e:	2001      	movs	r0, #1
 8006570:	f7fb fb74 	bl	8001c5c <HAL_Delay>
      ms++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f921 	bl	80067c2 <USB_GetMode>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <USB_SetCurrentMode+0x84>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b31      	cmp	r3, #49	; 0x31
 800658a:	d9f0      	bls.n	800656e <USB_SetCurrentMode+0x60>
 800658c:	e001      	b.n	8006592 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e005      	b.n	800659e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b32      	cmp	r3, #50	; 0x32
 8006596:	d101      	bne.n	800659c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4a13      	ldr	r2, [pc, #76]	; (800660c <USB_FlushTxFifo+0x64>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e01b      	b.n	8006600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	daf2      	bge.n	80065b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	019b      	lsls	r3, r3, #6
 80065d8:	f043 0220 	orr.w	r2, r3, #32
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a08      	ldr	r2, [pc, #32]	; (800660c <USB_FlushTxFifo+0x64>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e006      	b.n	8006600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d0f0      	beq.n	80065e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	00030d40 	.word	0x00030d40

08006610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a11      	ldr	r2, [pc, #68]	; (800666c <USB_FlushRxFifo+0x5c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e018      	b.n	8006660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	daf2      	bge.n	800661c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2210      	movs	r2, #16
 800663e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <USB_FlushRxFifo+0x5c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e006      	b.n	8006660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b10      	cmp	r3, #16
 800665c:	d0f0      	beq.n	8006640 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	00030d40 	.word	0x00030d40

08006670 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	460b      	mov	r3, r1
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	4613      	mov	r3, r2
 8006684:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800668e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d123      	bne.n	80066de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006696:	88bb      	ldrh	r3, [r7, #4]
 8006698:	3303      	adds	r3, #3
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	e018      	b.n	80066d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	031a      	lsls	r2, r3, #12
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b0:	461a      	mov	r2, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3301      	adds	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3e2      	bcc.n	80066a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3724      	adds	r7, #36	; 0x24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b08b      	sub	sp, #44	; 0x2c
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	b29b      	uxth	r3, r3
 8006708:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	e014      	b.n	8006742 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	601a      	str	r2, [r3, #0]
    pDest++;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	3301      	adds	r3, #1
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	3301      	adds	r3, #1
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	3301      	adds	r3, #1
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d3e6      	bcc.n	8006718 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800674a:	8bfb      	ldrh	r3, [r7, #30]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01e      	beq.n	800678e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675a:	461a      	mov	r2, r3
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	701a      	strb	r2, [r3, #0]
      i++;
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	3301      	adds	r3, #1
 800677a:	623b      	str	r3, [r7, #32]
      pDest++;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	3301      	adds	r3, #1
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006782:	8bfb      	ldrh	r3, [r7, #30]
 8006784:	3b01      	subs	r3, #1
 8006786:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006788:	8bfb      	ldrh	r3, [r7, #30]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1ea      	bne.n	8006764 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006790:	4618      	mov	r0, r3
 8006792:	372c      	adds	r7, #44	; 0x2c
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4013      	ands	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0301 	and.w	r3, r3, #1
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4a13      	ldr	r2, [pc, #76]	; (8006844 <USB_CoreReset+0x64>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e01b      	b.n	8006836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	daf2      	bge.n	80067ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f043 0201 	orr.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <USB_CoreReset+0x64>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d0f0      	beq.n	8006816 <USB_CoreReset+0x36>

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	00030d40 	.word	0x00030d40

08006848 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006848:	b084      	sub	sp, #16
 800684a:	b580      	push	{r7, lr}
 800684c:	b086      	sub	sp, #24
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10a      	bne.n	80068ba <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068b2:	f043 0304 	orr.w	r3, r3, #4
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e014      	b.n	80068e4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c8:	f023 0304 	bic.w	r3, r3, #4
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e009      	b.n	80068e4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068de:	f023 0304 	bic.w	r3, r3, #4
 80068e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068e4:	2110      	movs	r1, #16
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fe5e 	bl	80065a8 <USB_FlushTxFifo>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fe8a 	bl	8006610 <USB_FlushRxFifo>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e015      	b.n	8006938 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	461a      	mov	r2, r3
 800691a:	f04f 33ff 	mov.w	r3, #4294967295
 800691e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3301      	adds	r3, #1
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d3e5      	bcc.n	800690c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006960:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <USB_HostInit+0x16c>)
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <USB_HostInit+0x170>)
 800696c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006970:	e009      	b.n	8006986 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2280      	movs	r2, #128	; 0x80
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a10      	ldr	r2, [pc, #64]	; (80069bc <USB_HostInit+0x174>)
 800697c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a0f      	ldr	r2, [pc, #60]	; (80069c0 <USB_HostInit+0x178>)
 8006982:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f043 0210 	orr.w	r2, r3, #16
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <USB_HostInit+0x17c>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069b0:	b004      	add	sp, #16
 80069b2:	4770      	bx	lr
 80069b4:	01000200 	.word	0x01000200
 80069b8:	00e00300 	.word	0x00e00300
 80069bc:	00600080 	.word	0x00600080
 80069c0:	004000e0 	.word	0x004000e0
 80069c4:	a3200008 	.word	0xa3200008

080069c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a10:	461a      	mov	r2, r3
 8006a12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a16:	6053      	str	r3, [r2, #4]
 8006a18:	e009      	b.n	8006a2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d106      	bne.n	8006a2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a26:	461a      	mov	r2, r3
 8006a28:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a6c:	2064      	movs	r0, #100	; 0x64
 8006a6e:	f7fb f8f5 	bl	8001c5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a80:	200a      	movs	r0, #10
 8006a82:	f7fb f8eb 	bl	8001c5c <HAL_Delay>

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <USB_DriveVbus+0x44>
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d106      	bne.n	8006ad4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ad2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ade:	d109      	bne.n	8006af4 <USB_DriveVbus+0x64>
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	0c5b      	lsrs	r3, r3, #17
 8006b20:	f003 0303 	and.w	r3, r3, #3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	b29b      	uxth	r3, r3
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	461a      	mov	r2, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	70fb      	strb	r3, [r7, #3]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70bb      	strb	r3, [r7, #2]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	461a      	mov	r2, r3
 8006b84:	f04f 33ff 	mov.w	r3, #4294967295
 8006b88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d87e      	bhi.n	8006c90 <USB_HC_Init+0x13c>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USB_HC_Init+0x44>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006c53 	.word	0x08006c53
 8006ba0:	08006ba9 	.word	0x08006ba9
 8006ba4:	08006c15 	.word	0x08006c15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006bbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da10      	bge.n	8006be6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006be4:	e057      	b.n	8006c96 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d051      	beq.n	8006c96 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c10:	60d3      	str	r3, [r2, #12]
      break;
 8006c12:	e040      	b.n	8006c96 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	461a      	mov	r2, r3
 8006c22:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da34      	bge.n	8006c9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c50:	e023      	b.n	8006c9a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f240 2325 	movw	r3, #549	; 0x225
 8006c64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da17      	bge.n	8006c9e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c8e:	e006      	b.n	8006c9e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	77fb      	strb	r3, [r7, #31]
      break;
 8006c94:	e004      	b.n	8006ca0 <USB_HC_Init+0x14c>
      break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <USB_HC_Init+0x14c>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <USB_HC_Init+0x14c>
      break;
 8006c9e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cba:	f043 0302 	orr.w	r3, r3, #2
 8006cbe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	f003 030f 	and.w	r3, r3, #15
 8006cce:	2101      	movs	r1, #1
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	6939      	ldr	r1, [r7, #16]
 8006cd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da03      	bge.n	8006cfa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e001      	b.n	8006cfe <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff feff 	bl	8006b02 <USB_GetHostSpeed>
 8006d04:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d106      	bne.n	8006d1c <USB_HC_Init+0x1c8>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d003      	beq.n	8006d1c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e001      	b.n	8006d20 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d20:	787b      	ldrb	r3, [r7, #1]
 8006d22:	059b      	lsls	r3, r3, #22
 8006d24:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d28:	78bb      	ldrb	r3, [r7, #2]
 8006d2a:	02db      	lsls	r3, r3, #11
 8006d2c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d30:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d36:	049b      	lsls	r3, r3, #18
 8006d38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d3c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	0159      	lsls	r1, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	440b      	add	r3, r1
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d5c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d003      	beq.n	8006d6e <USB_HC_Init+0x21a>
 8006d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d10f      	bne.n	8006d8e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08c      	sub	sp, #48	; 0x30
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02d      	beq.n	8006e1e <USB_HC_StartXfer+0x86>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d129      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d117      	bne.n	8006e00 <USB_HC_StartXfer+0x68>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	79db      	ldrb	r3, [r3, #7]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <USB_HC_StartXfer+0x48>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	79db      	ldrb	r3, [r3, #7]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d10f      	bne.n	8006e00 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10b      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa0f 	bl	8007238 <USB_DoPing>
      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e0f8      	b.n	8007010 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d018      	beq.n	8006e58 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	8912      	ldrh	r2, [r2, #8]
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b01      	subs	r3, #1
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	8912      	ldrh	r2, [r2, #8]
 8006e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e3e:	8b7b      	ldrh	r3, [r7, #26]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d90b      	bls.n	8006e5c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e44:	8b7b      	ldrh	r3, [r7, #26]
 8006e46:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	8912      	ldrh	r2, [r2, #8]
 8006e4e:	fb03 f202 	mul.w	r2, r3, r2
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	611a      	str	r2, [r3, #16]
 8006e56:	e001      	b.n	8006e5c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	78db      	ldrb	r3, [r3, #3]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	8912      	ldrh	r2, [r2, #8]
 8006e6a:	fb03 f202 	mul.w	r2, r3, r2
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	611a      	str	r2, [r3, #16]
 8006e72:	e003      	b.n	8006e7c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e86:	04d9      	lsls	r1, r3, #19
 8006e88:	4b63      	ldr	r3, [pc, #396]	; (8007018 <USB_HC_StartXfer+0x280>)
 8006e8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	7a9b      	ldrb	r3, [r3, #10]
 8006e92:	075b      	lsls	r3, r3, #29
 8006e94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	6a39      	ldr	r1, [r7, #32]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ea4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	68d9      	ldr	r1, [r3, #12]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	7e7b      	ldrb	r3, [r7, #25]
 8006f0a:	075b      	lsls	r3, r3, #29
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	0148      	lsls	r0, r1, #5
 8006f10:	6a39      	ldr	r1, [r7, #32]
 8006f12:	4401      	add	r1, r0
 8006f14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e003      	b.n	8006f4e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f4c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f54:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	461a      	mov	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e04e      	b.n	8007010 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	78db      	ldrb	r3, [r3, #3]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d149      	bne.n	800700e <USB_HC_StartXfer+0x276>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d045      	beq.n	800700e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	79db      	ldrb	r3, [r3, #7]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d830      	bhi.n	8006fec <USB_HC_StartXfer+0x254>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USB_HC_StartXfer+0x1f8>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fa1 	.word	0x08006fa1
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	08006fa1 	.word	0x08006fa1
 8006f9c:	08006fc5 	.word	0x08006fc5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	3303      	adds	r3, #3
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d91c      	bls.n	8006ff0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f043 0220 	orr.w	r2, r3, #32
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fc2:	e015      	b.n	8006ff0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fce:	8afa      	ldrh	r2, [r7, #22]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d90a      	bls.n	8006ff4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fea:	e003      	b.n	8006ff4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <USB_HC_StartXfer+0x25e>
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <USB_HC_StartXfer+0x25e>
        break;
 8006ff4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	785a      	ldrb	r2, [r3, #1]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	b29b      	uxth	r3, r3
 8007004:	2000      	movs	r0, #0
 8007006:	9000      	str	r0, [sp, #0]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fb31 	bl	8006670 <USB_WritePacket>
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3728      	adds	r7, #40	; 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	1ff80000 	.word	0x1ff80000

0800701c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	b29b      	uxth	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800703e:	b480      	push	{r7}
 8007040:	b089      	sub	sp, #36	; 0x24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	0c9b      	lsrs	r3, r3, #18
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	0fdb      	lsrs	r3, r3, #31
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d104      	bne.n	8007098 <USB_HC_Halt+0x5a>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e0c8      	b.n	800722a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <USB_HC_Halt+0x66>
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d163      	bne.n	800716c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 80ab 	bne.w	8007228 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d133      	bne.n	8007146 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	440a      	add	r2, r1
 8007114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800711c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712a:	d81d      	bhi.n	8007168 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007142:	d0ec      	beq.n	800711e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007144:	e070      	b.n	8007228 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007164:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007166:	e05f      	b.n	8007228 <USB_HC_Halt+0x1ea>
            break;
 8007168:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800716a:	e05d      	b.n	8007228 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800718a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d133      	bne.n	8007204 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071e8:	d81d      	bhi.n	8007226 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007200:	d0ec      	beq.n	80071dc <USB_HC_Halt+0x19e>
 8007202:	e011      	b.n	8007228 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	e000      	b.n	8007228 <USB_HC_Halt+0x1ea>
          break;
 8007226:	bf00      	nop
    }
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3724      	adds	r7, #36	; 0x24
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800724c:	2301      	movs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	04da      	lsls	r2, r3, #19
 8007254:	4b15      	ldr	r3, [pc, #84]	; (80072ac <USB_DoPing+0x74>)
 8007256:	4013      	ands	r3, r2
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	440a      	add	r2, r1
 8007260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007268:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007280:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007288:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	461a      	mov	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	1ff80000 	.word	0x1ff80000

080072b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff f911 	bl	80064ec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072ca:	2110      	movs	r1, #16
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff f96b 	bl	80065a8 <USB_FlushTxFifo>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff f997 	bl	8006610 <USB_FlushRxFifo>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	e01f      	b.n	8007332 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007308:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007310:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007318:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	461a      	mov	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	3301      	adds	r3, #1
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b0f      	cmp	r3, #15
 8007336:	d9dc      	bls.n	80072f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007338:	2300      	movs	r3, #0
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	e034      	b.n	80073a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007354:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800735c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007364:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	461a      	mov	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007384:	d80c      	bhi.n	80073a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800739c:	d0ec      	beq.n	8007378 <USB_StopHost+0xc8>
 800739e:	e000      	b.n	80073a2 <USB_StopHost+0xf2>
        break;
 80073a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d9c7      	bls.n	800733e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073b4:	461a      	mov	r2, r3
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f04f 32ff 	mov.w	r2, #4294967295
 80073c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f880 	bl	80064ca <USB_EnableGlobalInt>

  return ret;
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b089      	sub	sp, #36	; 0x24
 80073d8:	af04      	add	r7, sp, #16
 80073da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073dc:	2301      	movs	r3, #1
 80073de:	2202      	movs	r2, #2
 80073e0:	2102      	movs	r1, #2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fc66 	bl	8007cb4 <USBH_FindInterface>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2bff      	cmp	r3, #255	; 0xff
 80073f0:	d002      	beq.n	80073f8 <USBH_CDC_InterfaceInit+0x24>
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d901      	bls.n	80073fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073f8:	2302      	movs	r3, #2
 80073fa:	e13d      	b.n	8007678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fc3b 	bl	8007c7c <USBH_SelectInterface>
 8007406:	4603      	mov	r3, r0
 8007408:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007410:	2302      	movs	r3, #2
 8007412:	e131      	b.n	8007678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800741a:	2050      	movs	r0, #80	; 0x50
 800741c:	f002 fad2 	bl	80099c4 <malloc>
 8007420:	4603      	mov	r3, r0
 8007422:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	e11f      	b.n	8007678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007438:	2250      	movs	r2, #80	; 0x50
 800743a:	2100      	movs	r1, #0
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f002 fb7d 	bl	8009b3c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	211a      	movs	r1, #26
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b25b      	sxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	da15      	bge.n	8007486 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	211a      	movs	r1, #26
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	4413      	add	r3, r2
 8007466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	211a      	movs	r1, #26
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	4413      	add	r3, r2
 800747c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 ff2e 	bl	80092ee <USBH_AllocPipe>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	7858      	ldrb	r0, [r3, #1]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	8952      	ldrh	r2, [r2, #10]
 80074b2:	9202      	str	r2, [sp, #8]
 80074b4:	2203      	movs	r2, #3
 80074b6:	9201      	str	r2, [sp, #4]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4623      	mov	r3, r4
 80074bc:	4602      	mov	r2, r0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fee6 	bl	8009290 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2200      	movs	r2, #0
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f002 f9f5 	bl	80098bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074d2:	2300      	movs	r3, #0
 80074d4:	2200      	movs	r2, #0
 80074d6:	210a      	movs	r1, #10
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fbeb 	bl	8007cb4 <USBH_FindInterface>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2bff      	cmp	r3, #255	; 0xff
 80074e6:	d002      	beq.n	80074ee <USBH_CDC_InterfaceInit+0x11a>
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d901      	bls.n	80074f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0c2      	b.n	8007678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	211a      	movs	r1, #26
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b25b      	sxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	da16      	bge.n	8007538 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	211a      	movs	r1, #26
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	4413      	add	r3, r2
 8007516:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	211a      	movs	r1, #26
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	4413      	add	r3, r2
 800752c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007530:	881a      	ldrh	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	835a      	strh	r2, [r3, #26]
 8007536:	e015      	b.n	8007564 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	211a      	movs	r1, #26
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	4413      	add	r3, r2
 8007544:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	211a      	movs	r1, #26
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800755e:	881a      	ldrh	r2, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	211a      	movs	r1, #26
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b25b      	sxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	da16      	bge.n	80075aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	211a      	movs	r1, #26
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	f203 3356 	addw	r3, r3, #854	; 0x356
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	211a      	movs	r1, #26
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075a2:	881a      	ldrh	r2, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	835a      	strh	r2, [r3, #26]
 80075a8:	e015      	b.n	80075d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	211a      	movs	r1, #26
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	4413      	add	r3, r2
 80075b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	211a      	movs	r1, #26
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	7b9b      	ldrb	r3, [r3, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fe86 	bl	80092ee <USBH_AllocPipe>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	7bdb      	ldrb	r3, [r3, #15]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fe7c 	bl	80092ee <USBH_AllocPipe>
 80075f6:	4603      	mov	r3, r0
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	7b59      	ldrb	r1, [r3, #13]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	7b98      	ldrb	r0, [r3, #14]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	8b12      	ldrh	r2, [r2, #24]
 8007616:	9202      	str	r2, [sp, #8]
 8007618:	2202      	movs	r2, #2
 800761a:	9201      	str	r2, [sp, #4]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4623      	mov	r3, r4
 8007620:	4602      	mov	r2, r0
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fe34 	bl	8009290 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	7b19      	ldrb	r1, [r3, #12]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	7bd8      	ldrb	r0, [r3, #15]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	8b52      	ldrh	r2, [r2, #26]
 8007640:	9202      	str	r2, [sp, #8]
 8007642:	2202      	movs	r2, #2
 8007644:	9201      	str	r2, [sp, #4]
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4623      	mov	r3, r4
 800764a:	4602      	mov	r2, r0
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fe1f 	bl	8009290 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	7b5b      	ldrb	r3, [r3, #13]
 800765e:	2200      	movs	r2, #0
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 f92a 	bl	80098bc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	7b1b      	ldrb	r3, [r3, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 f923 	bl	80098bc <USBH_LL_SetToggle>

  return USBH_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}

08007680 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 fe14 	bl	80092ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fe3f 	bl	8009330 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	7b1b      	ldrb	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00e      	beq.n	80076de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7b1b      	ldrb	r3, [r3, #12]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fe01 	bl	80092ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fe2c 	bl	8009330 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	7b5b      	ldrb	r3, [r3, #13]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 fdee 	bl	80092ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7b5b      	ldrb	r3, [r3, #13]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fe19 	bl	8009330 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	4618      	mov	r0, r3
 800771a:	f002 f95b 	bl	80099d4 <free>
    phost->pActiveClass->pData = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007724:	2200      	movs	r2, #0
 8007726:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3340      	adds	r3, #64	; 0x40
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8b1 	bl	80078b2 <GetLineCoding>
 8007750:	4603      	mov	r3, r0
 8007752:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007760:	2102      	movs	r1, #2
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007766:	7afb      	ldrb	r3, [r7, #11]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007790:	2b04      	cmp	r3, #4
 8007792:	d877      	bhi.n	8007884 <USBH_CDC_Process+0x114>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBH_CDC_Process+0x2c>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077b1 	.word	0x080077b1
 80077a0:	080077b7 	.word	0x080077b7
 80077a4:	080077e7 	.word	0x080077e7
 80077a8:	0800785b 	.word	0x0800785b
 80077ac:	08007869 	.word	0x08007869
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
      break;
 80077b4:	e06d      	b.n	8007892 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f897 	bl	80078f0 <SetLineCoding>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077d4:	e058      	b.n	8007888 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d055      	beq.n	8007888 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2204      	movs	r2, #4
 80077e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077e4:	e050      	b.n	8007888 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3340      	adds	r3, #64	; 0x40
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f860 	bl	80078b2 <GetLineCoding>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d126      	bne.n	800784a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d13b      	bne.n	800788c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007820:	429a      	cmp	r2, r3
 8007822:	d133      	bne.n	800788c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007830:	429a      	cmp	r2, r3
 8007832:	d12b      	bne.n	800788c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800783e:	429a      	cmp	r2, r3
 8007840:	d124      	bne.n	800788c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f958 	bl	8007af8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007848:	e020      	b.n	800788c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d01d      	beq.n	800788c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2204      	movs	r2, #4
 8007854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007858:	e018      	b.n	800788c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f867 	bl	800792e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f8da 	bl	8007a1a <CDC_ProcessReception>
      break;
 8007866:	e014      	b.n	8007892 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 ffef 	bl	800884e <USBH_ClrFeature>
 8007870:	4603      	mov	r3, r0
 8007872:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007882:	e005      	b.n	8007890 <USBH_CDC_Process+0x120>

    default:
      break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <USBH_CDC_Process+0x122>
      break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <USBH_CDC_Process+0x122>
      break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <USBH_CDC_Process+0x122>
      break;
 8007890:	bf00      	nop

  }

  return status;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	22a1      	movs	r2, #161	; 0xa1
 80078c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2221      	movs	r2, #33	; 0x21
 80078c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2207      	movs	r2, #7
 80078d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2207      	movs	r2, #7
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 fa83 	bl	8008dec <USBH_CtlReq>
 80078e6:	4603      	mov	r3, r0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2221      	movs	r2, #33	; 0x21
 80078fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2207      	movs	r2, #7
 8007916:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2207      	movs	r2, #7
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fa64 	bl	8008dec <USBH_CtlReq>
 8007924:	4603      	mov	r3, r0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af02      	add	r7, sp, #8
 8007934:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007940:	2300      	movs	r3, #0
 8007942:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800794a:	2b01      	cmp	r3, #1
 800794c:	d002      	beq.n	8007954 <CDC_ProcessTransmission+0x26>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d023      	beq.n	800799a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007952:	e05e      	b.n	8007a12 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	8b12      	ldrh	r2, [r2, #24]
 800795c:	4293      	cmp	r3, r2
 800795e:	d90b      	bls.n	8007978 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	69d9      	ldr	r1, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8b1a      	ldrh	r2, [r3, #24]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7b5b      	ldrb	r3, [r3, #13]
 800796c:	2001      	movs	r0, #1
 800796e:	9000      	str	r0, [sp, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fc4a 	bl	800920a <USBH_BulkSendData>
 8007976:	e00b      	b.n	8007990 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	7b5b      	ldrb	r3, [r3, #13]
 8007986:	2001      	movs	r0, #1
 8007988:	9000      	str	r0, [sp, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fc3d 	bl	800920a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007998:	e03b      	b.n	8007a12 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	7b5b      	ldrb	r3, [r3, #13]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 ff61 	bl	8009868 <USBH_LL_GetURBState>
 80079a6:	4603      	mov	r3, r0
 80079a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d128      	bne.n	8007a02 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	8b12      	ldrh	r2, [r2, #24]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d90e      	bls.n	80079da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	8b12      	ldrh	r2, [r2, #24]
 80079c4:	1a9a      	subs	r2, r3, r2
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	8b12      	ldrh	r2, [r2, #24]
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	61da      	str	r2, [r3, #28]
 80079d8:	e002      	b.n	80079e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079f0:	e00e      	b.n	8007a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f868 	bl	8007ad0 <USBH_CDC_TransmitCallback>
      break;
 8007a00:	e006      	b.n	8007a10 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d103      	bne.n	8007a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a10:	bf00      	nop
  }
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d002      	beq.n	8007a40 <CDC_ProcessReception+0x26>
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d00e      	beq.n	8007a5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a3e:	e043      	b.n	8007ac8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	6a19      	ldr	r1, [r3, #32]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	8b5a      	ldrh	r2, [r3, #26]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	7b1b      	ldrb	r3, [r3, #12]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 fc01 	bl	8009254 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a5a:	e035      	b.n	8007ac8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	7b1b      	ldrb	r3, [r3, #12]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 ff00 	bl	8009868 <USBH_LL_GetURBState>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a6c:	7cfb      	ldrb	r3, [r7, #19]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d129      	bne.n	8007ac6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	7b1b      	ldrb	r3, [r3, #12]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fe63 	bl	8009744 <USBH_LL_GetLastXferSize>
 8007a7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d016      	beq.n	8007ab8 <CDC_ProcessReception+0x9e>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	8b5b      	ldrh	r3, [r3, #26]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d910      	bls.n	8007ab8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	1ad2      	subs	r2, r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	441a      	add	r2, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ab6:	e006      	b.n	8007ac6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f80f 	bl	8007ae4 <USBH_CDC_ReceiveCallback>
      break;
 8007ac6:	bf00      	nop
  }
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b20:	2302      	movs	r3, #2
 8007b22:	e029      	b.n	8007b78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f81f 	bl	8007b80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f001 fd33 	bl	80095dc <USBH_LL_Init>

  return USBH_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e009      	b.n	8007ba6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	33e0      	adds	r3, #224	; 0xe0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b0f      	cmp	r3, #15
 8007baa:	d9f2      	bls.n	8007b92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	e009      	b.n	8007bc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bcc:	d3f1      	bcc.n	8007bb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2240      	movs	r2, #64	; 0x40
 8007bf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d016      	beq.n	8007c6a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10e      	bne.n	8007c64 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c4c:	1c59      	adds	r1, r3, #1
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	33de      	adds	r3, #222	; 0xde
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	e004      	b.n	8007c6e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c64:	2302      	movs	r3, #2
 8007c66:	73fb      	strb	r3, [r7, #15]
 8007c68:	e001      	b.n	8007c6e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d204      	bcs.n	8007ca2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ca0:	e001      	b.n	8007ca6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	70fb      	strb	r3, [r7, #3]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70bb      	strb	r3, [r7, #2]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cdc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cde:	e025      	b.n	8007d2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	221a      	movs	r2, #26
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
 8007ce8:	3308      	adds	r3, #8
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	3302      	adds	r3, #2
 8007cf0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	795b      	ldrb	r3, [r3, #5]
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d002      	beq.n	8007d02 <USBH_FindInterface+0x4e>
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	2bff      	cmp	r3, #255	; 0xff
 8007d00:	d111      	bne.n	8007d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d06:	78ba      	ldrb	r2, [r7, #2]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d002      	beq.n	8007d12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d0c:	78bb      	ldrb	r3, [r7, #2]
 8007d0e:	2bff      	cmp	r3, #255	; 0xff
 8007d10:	d109      	bne.n	8007d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d16:	787a      	ldrb	r2, [r7, #1]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d002      	beq.n	8007d22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d1c:	787b      	ldrb	r3, [r7, #1]
 8007d1e:	2bff      	cmp	r3, #255	; 0xff
 8007d20:	d101      	bne.n	8007d26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	e006      	b.n	8007d34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d9d6      	bls.n	8007ce0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d32:	23ff      	movs	r3, #255	; 0xff
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 fc83 	bl	8009654 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d4e:	2101      	movs	r1, #1
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fd9c 	bl	800988e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d102      	bne.n	8007d82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b0b      	cmp	r3, #11
 8007d8a:	f200 81be 	bhi.w	800810a <USBH_Process+0x3aa>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBH_Process+0x34>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007df7 	.word	0x08007df7
 8007d9c:	08007e5f 	.word	0x08007e5f
 8007da0:	080080a5 	.word	0x080080a5
 8007da4:	0800810b 	.word	0x0800810b
 8007da8:	08007f03 	.word	0x08007f03
 8007dac:	0800804b 	.word	0x0800804b
 8007db0:	08007f39 	.word	0x08007f39
 8007db4:	08007f59 	.word	0x08007f59
 8007db8:	08007f79 	.word	0x08007f79
 8007dbc:	08007fbd 	.word	0x08007fbd
 8007dc0:	0800808d 	.word	0x0800808d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 819e 	beq.w	800810e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007dd8:	20c8      	movs	r0, #200	; 0xc8
 8007dda:	f001 fd9f 	bl	800991c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fc95 	bl	800970e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007df4:	e18b      	b.n	800810e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e0e:	e18d      	b.n	800812c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e1a:	d914      	bls.n	8007e46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e22:	3301      	adds	r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d903      	bls.n	8007e3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220d      	movs	r2, #13
 8007e3a:	701a      	strb	r2, [r3, #0]
      break;
 8007e3c:	e176      	b.n	800812c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
      break;
 8007e44:	e172      	b.n	800812c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e4c:	f103 020a 	add.w	r2, r3, #10
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e56:	200a      	movs	r0, #10
 8007e58:	f001 fd60 	bl	800991c <USBH_Delay>
      break;
 8007e5c:	e166      	b.n	800812c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e6e:	2104      	movs	r1, #4
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e74:	2064      	movs	r0, #100	; 0x64
 8007e76:	f001 fd51 	bl	800991c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fc20 	bl	80096c0 <USBH_LL_GetSpeed>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2205      	movs	r2, #5
 8007e8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fa2b 	bl	80092ee <USBH_AllocPipe>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ea0:	2180      	movs	r1, #128	; 0x80
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fa23 	bl	80092ee <USBH_AllocPipe>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	7919      	ldrb	r1, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	9202      	str	r2, [sp, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	9201      	str	r2, [sp, #4]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f9dc 	bl	8009290 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7959      	ldrb	r1, [r3, #5]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007eec:	b292      	uxth	r2, r2
 8007eee:	9202      	str	r2, [sp, #8]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	9201      	str	r2, [sp, #4]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 f9c8 	bl	8009290 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f00:	e114      	b.n	800812c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f918 	bl	8008138 <USBH_HandleEnum>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 80fe 	bne.w	8008112 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d103      	bne.n	8007f30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f2e:	e0f0      	b.n	8008112 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2207      	movs	r2, #7
 8007f34:	701a      	strb	r2, [r3, #0]
      break;
 8007f36:	e0ec      	b.n	8008112 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80e9 	beq.w	8008116 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2208      	movs	r2, #8
 8007f54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007f56:	e0de      	b.n	8008116 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc2c 	bl	80087c0 <USBH_SetCfg>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 80d5 	bne.w	800811a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2209      	movs	r2, #9
 8007f74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f76:	e0d0      	b.n	800811a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d016      	beq.n	8007fb4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f86:	2101      	movs	r1, #1
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc3c 	bl	8008806 <USBH_SetFeature>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fa0:	e0bd      	b.n	800811e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	f040 80b9 	bne.w	800811e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220a      	movs	r2, #10
 8007fb0:	701a      	strb	r2, [r3, #0]
      break;
 8007fb2:	e0b4      	b.n	800811e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	701a      	strb	r2, [r3, #0]
      break;
 8007fba:	e0b0      	b.n	800811e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80ad 	beq.w	8008122 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	e016      	b.n	8008004 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	32de      	adds	r2, #222	; 0xde
 8007fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe0:	791a      	ldrb	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d108      	bne.n	8007ffe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32de      	adds	r2, #222	; 0xde
 8007ff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007ffc:	e005      	b.n	800800a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	3301      	adds	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0e5      	beq.n	8007fd6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d016      	beq.n	8008042 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2206      	movs	r2, #6
 800802a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008032:	2103      	movs	r1, #3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008038:	e073      	b.n	8008122 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	220d      	movs	r2, #13
 800803e:	701a      	strb	r2, [r3, #0]
      break;
 8008040:	e06f      	b.n	8008122 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	220d      	movs	r2, #13
 8008046:	701a      	strb	r2, [r3, #0]
      break;
 8008048:	e06b      	b.n	8008122 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d017      	beq.n	8008084 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d103      	bne.n	8008074 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	220b      	movs	r2, #11
 8008070:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008072:	e058      	b.n	8008126 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d154      	bne.n	8008126 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	220d      	movs	r2, #13
 8008080:	701a      	strb	r2, [r3, #0]
      break;
 8008082:	e050      	b.n	8008126 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	220d      	movs	r2, #13
 8008088:	701a      	strb	r2, [r3, #0]
      break;
 800808a:	e04c      	b.n	8008126 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d049      	beq.n	800812a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
      }
      break;
 80080a2:	e042      	b.n	800812a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fd67 	bl	8007b80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e0:	2105      	movs	r1, #5
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d107      	bne.n	8008102 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fe20 	bl	8007d40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008100:	e014      	b.n	800812c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 faa6 	bl	8009654 <USBH_LL_Start>
      break;
 8008108:	e010      	b.n	800812c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800810a:	bf00      	nop
 800810c:	e00e      	b.n	800812c <USBH_Process+0x3cc>
      break;
 800810e:	bf00      	nop
 8008110:	e00c      	b.n	800812c <USBH_Process+0x3cc>
      break;
 8008112:	bf00      	nop
 8008114:	e00a      	b.n	800812c <USBH_Process+0x3cc>
    break;
 8008116:	bf00      	nop
 8008118:	e008      	b.n	800812c <USBH_Process+0x3cc>
      break;
 800811a:	bf00      	nop
 800811c:	e006      	b.n	800812c <USBH_Process+0x3cc>
      break;
 800811e:	bf00      	nop
 8008120:	e004      	b.n	800812c <USBH_Process+0x3cc>
      break;
 8008122:	bf00      	nop
 8008124:	e002      	b.n	800812c <USBH_Process+0x3cc>
      break;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <USBH_Process+0x3cc>
      break;
 800812a:	bf00      	nop
  }
  return USBH_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop

08008138 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af04      	add	r7, sp, #16
 800813e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008144:	2301      	movs	r3, #1
 8008146:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b07      	cmp	r3, #7
 800814e:	f200 81c1 	bhi.w	80084d4 <USBH_HandleEnum+0x39c>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <USBH_HandleEnum+0x20>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	08008179 	.word	0x08008179
 800815c:	08008237 	.word	0x08008237
 8008160:	080082a1 	.word	0x080082a1
 8008164:	0800832f 	.word	0x0800832f
 8008168:	08008399 	.word	0x08008399
 800816c:	08008409 	.word	0x08008409
 8008170:	0800844f 	.word	0x0800844f
 8008174:	08008495 	.word	0x08008495
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008178:	2108      	movs	r1, #8
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa50 	bl	8008620 <USBH_Get_DevDesc>
 8008180:	4603      	mov	r3, r0
 8008182:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d130      	bne.n	80081ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7919      	ldrb	r1, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081ae:	b292      	uxth	r2, r2
 80081b0:	9202      	str	r2, [sp, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	9201      	str	r2, [sp, #4]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4603      	mov	r3, r0
 80081ba:	2280      	movs	r2, #128	; 0x80
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f867 	bl	8009290 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7959      	ldrb	r1, [r3, #5]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081d6:	b292      	uxth	r2, r2
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	9201      	str	r2, [sp, #4]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	2200      	movs	r2, #0
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f853 	bl	8009290 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081ea:	e175      	b.n	80084d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	f040 8172 	bne.w	80084d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081fa:	3301      	adds	r3, #1
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820a:	2b03      	cmp	r3, #3
 800820c:	d903      	bls.n	8008216 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	220d      	movs	r2, #13
 8008212:	701a      	strb	r2, [r3, #0]
      break;
 8008214:	e160      	b.n	80084d8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f887 	bl	8009330 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	791b      	ldrb	r3, [r3, #4]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f881 	bl	8009330 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
      break;
 8008234:	e150      	b.n	80084d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008236:	2112      	movs	r1, #18
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f9f1 	bl	8008620 <USBH_Get_DevDesc>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800824e:	e145      	b.n	80084dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b03      	cmp	r3, #3
 8008254:	f040 8142 	bne.w	80084dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800825e:	3301      	adds	r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800826e:	2b03      	cmp	r3, #3
 8008270:	d903      	bls.n	800827a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	220d      	movs	r2, #13
 8008276:	701a      	strb	r2, [r3, #0]
      break;
 8008278:	e130      	b.n	80084dc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	795b      	ldrb	r3, [r3, #5]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f855 	bl	8009330 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	791b      	ldrb	r3, [r3, #4]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 f84f 	bl	8009330 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e11d      	b.n	80084dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082a0:	2101      	movs	r1, #1
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa68 	bl	8008778 <USBH_SetAddress>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d132      	bne.n	8008318 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082b2:	2002      	movs	r0, #2
 80082b4:	f001 fb32 	bl	800991c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2203      	movs	r2, #3
 80082c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7919      	ldrb	r1, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082da:	b292      	uxth	r2, r2
 80082dc:	9202      	str	r2, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	9201      	str	r2, [sp, #4]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4603      	mov	r3, r0
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 ffd1 	bl	8009290 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7959      	ldrb	r1, [r3, #5]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008302:	b292      	uxth	r2, r2
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4603      	mov	r3, r0
 800830e:	2200      	movs	r2, #0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 ffbd 	bl	8009290 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008316:	e0e3      	b.n	80084e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b03      	cmp	r3, #3
 800831c:	f040 80e0 	bne.w	80084e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	220d      	movs	r2, #13
 8008324:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	705a      	strb	r2, [r3, #1]
      break;
 800832c:	e0d8      	b.n	80084e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800832e:	2109      	movs	r1, #9
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f99d 	bl	8008670 <USBH_Get_CfgDesc>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2204      	movs	r2, #4
 8008344:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008346:	e0cd      	b.n	80084e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b03      	cmp	r3, #3
 800834c:	f040 80ca 	bne.w	80084e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008356:	3301      	adds	r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008366:	2b03      	cmp	r3, #3
 8008368:	d903      	bls.n	8008372 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	220d      	movs	r2, #13
 800836e:	701a      	strb	r2, [r3, #0]
      break;
 8008370:	e0b8      	b.n	80084e4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	795b      	ldrb	r3, [r3, #5]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 ffd9 	bl	8009330 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 ffd3 	bl	8009330 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
      break;
 8008396:	e0a5      	b.n	80084e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f965 	bl	8008670 <USBH_Get_CfgDesc>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2205      	movs	r2, #5
 80083b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083b6:	e097      	b.n	80084e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	f040 8094 	bne.w	80084e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083c6:	3301      	adds	r3, #1
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d903      	bls.n	80083e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	220d      	movs	r2, #13
 80083de:	701a      	strb	r2, [r3, #0]
      break;
 80083e0:	e082      	b.n	80084e8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	795b      	ldrb	r3, [r3, #5]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 ffa1 	bl	8009330 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 ff9b 	bl	8009330 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
      break;
 8008406:	e06f      	b.n	80084e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800840e:	2b00      	cmp	r3, #0
 8008410:	d019      	beq.n	8008446 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800841e:	23ff      	movs	r3, #255	; 0xff
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f949 	bl	80086b8 <USBH_Get_StringDesc>
 8008426:	4603      	mov	r3, r0
 8008428:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2206      	movs	r2, #6
 8008434:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008436:	e059      	b.n	80084ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d156      	bne.n	80084ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2206      	movs	r2, #6
 8008442:	705a      	strb	r2, [r3, #1]
      break;
 8008444:	e052      	b.n	80084ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2206      	movs	r2, #6
 800844a:	705a      	strb	r2, [r3, #1]
      break;
 800844c:	e04e      	b.n	80084ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008454:	2b00      	cmp	r3, #0
 8008456:	d019      	beq.n	800848c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008464:	23ff      	movs	r3, #255	; 0xff
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f926 	bl	80086b8 <USBH_Get_StringDesc>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2207      	movs	r2, #7
 800847a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800847c:	e038      	b.n	80084f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d135      	bne.n	80084f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2207      	movs	r2, #7
 8008488:	705a      	strb	r2, [r3, #1]
      break;
 800848a:	e031      	b.n	80084f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2207      	movs	r2, #7
 8008490:	705a      	strb	r2, [r3, #1]
      break;
 8008492:	e02d      	b.n	80084f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800849a:	2b00      	cmp	r3, #0
 800849c:	d017      	beq.n	80084ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084aa:	23ff      	movs	r3, #255	; 0xff
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f903 	bl	80086b8 <USBH_Get_StringDesc>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d102      	bne.n	80084c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084c0:	e018      	b.n	80084f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d115      	bne.n	80084f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
      break;
 80084cc:	e012      	b.n	80084f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]
      break;
 80084d2:	e00f      	b.n	80084f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084d4:	bf00      	nop
 80084d6:	e00e      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084d8:	bf00      	nop
 80084da:	e00c      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084dc:	bf00      	nop
 80084de:	e00a      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084e0:	bf00      	nop
 80084e2:	e008      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084e4:	bf00      	nop
 80084e6:	e006      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084e8:	bf00      	nop
 80084ea:	e004      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <USBH_HandleEnum+0x3be>
      break;
 80084f4:	bf00      	nop
  }
  return Status;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f804 	bl	8008542 <USBH_HandleSof>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b0b      	cmp	r3, #11
 8008552:	d10a      	bne.n	800856a <USBH_HandleSof+0x28>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
  }
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008582:	bf00      	nop
}
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800859e:	bf00      	nop
}
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f846 	bl	800968a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fe93 	bl	8009330 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fe8d 	bl	8009330 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	b29b      	uxth	r3, r3
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800863e:	2100      	movs	r1, #0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f864 	bl	800870e <USBH_GetDescriptor>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	b292      	uxth	r2, r2
 8008660:	4619      	mov	r1, r3
 8008662:	f000 f919 	bl	8008898 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af02      	add	r7, sp, #8
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	331c      	adds	r3, #28
 8008680:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f83d 	bl	800870e <USBH_GetDescriptor>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d107      	bne.n	80086ae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800869e:	887b      	ldrh	r3, [r7, #2]
 80086a0:	461a      	mov	r2, r3
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f989 	bl	80089bc <USBH_ParseCfgDesc>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	461a      	mov	r2, r3
 80086c4:	460b      	mov	r3, r1
 80086c6:	72fb      	strb	r3, [r7, #11]
 80086c8:	4613      	mov	r3, r2
 80086ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086d4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086dc:	893b      	ldrh	r3, [r7, #8]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	460b      	mov	r3, r1
 80086e2:	2100      	movs	r1, #0
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f812 	bl	800870e <USBH_GetDescriptor>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d107      	bne.n	8008704 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086fa:	893a      	ldrh	r2, [r7, #8]
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fb26 	bl	8008d50 <USBH_ParseStringDesc>
  }

  return status;
 8008704:	7dfb      	ldrb	r3, [r7, #23]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	72fb      	strb	r3, [r7, #11]
 800871c:	4613      	mov	r3, r2
 800871e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d11c      	bne.n	8008762 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800872e:	b2da      	uxtb	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2206      	movs	r2, #6
 8008738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	893a      	ldrh	r2, [r7, #8]
 800873e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800874a:	d104      	bne.n	8008756 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f240 4209 	movw	r2, #1033	; 0x409
 8008752:	829a      	strh	r2, [r3, #20]
 8008754:	e002      	b.n	800875c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8b3a      	ldrh	r2, [r7, #24]
 8008760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008762:	8b3b      	ldrh	r3, [r7, #24]
 8008764:	461a      	mov	r2, r3
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fb3f 	bl	8008dec <USBH_CtlReq>
 800876e:	4603      	mov	r3, r0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	789b      	ldrb	r3, [r3, #2]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d10f      	bne.n	80087ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2205      	movs	r2, #5
 8008796:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	b29a      	uxth	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087ac:	2200      	movs	r2, #0
 80087ae:	2100      	movs	r1, #0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb1b 	bl	8008dec <USBH_CtlReq>
 80087b6:	4603      	mov	r3, r0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	789b      	ldrb	r3, [r3, #2]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d10e      	bne.n	80087f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2209      	movs	r2, #9
 80087de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	887a      	ldrh	r2, [r7, #2]
 80087e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 faf8 	bl	8008dec <USBH_CtlReq>
 80087fc:	4603      	mov	r3, r0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	789b      	ldrb	r3, [r3, #2]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10f      	bne.n	800883a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2203      	movs	r2, #3
 8008824:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	b29a      	uxth	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fad4 	bl	8008dec <USBH_CtlReq>
 8008844:	4603      	mov	r3, r0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	789b      	ldrb	r3, [r3, #2]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10f      	bne.n	8008882 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fab0 	bl	8008dec <USBH_CtlReq>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	781a      	ldrb	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	785a      	ldrb	r2, [r3, #1]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	3302      	adds	r3, #2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3303      	adds	r3, #3
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4313      	orrs	r3, r2
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	791a      	ldrb	r2, [r3, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	795a      	ldrb	r2, [r3, #5]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	799a      	ldrb	r2, [r3, #6]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	79da      	ldrb	r2, [r3, #7]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	79db      	ldrb	r3, [r3, #7]
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	dc0f      	bgt.n	800891a <USBH_ParseDevDesc+0x82>
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	db14      	blt.n	8008928 <USBH_ParseDevDesc+0x90>
 80088fe:	3b08      	subs	r3, #8
 8008900:	4a2d      	ldr	r2, [pc, #180]	; (80089b8 <USBH_ParseDevDesc+0x120>)
 8008902:	fa22 f303 	lsr.w	r3, r2, r3
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	bf14      	ite	ne
 800890e:	2301      	movne	r3, #1
 8008910:	2300      	moveq	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <USBH_ParseDevDesc+0x86>
 8008918:	e006      	b.n	8008928 <USBH_ParseDevDesc+0x90>
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d104      	bne.n	8008928 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	79da      	ldrb	r2, [r3, #7]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	71da      	strb	r2, [r3, #7]
      break;
 8008926:	e003      	b.n	8008930 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2240      	movs	r2, #64	; 0x40
 800892c:	71da      	strb	r2, [r3, #7]
      break;
 800892e:	bf00      	nop
  }

  if (length > 8U)
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	2b08      	cmp	r3, #8
 8008934:	d939      	bls.n	80089aa <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3308      	adds	r3, #8
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b29a      	uxth	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3309      	adds	r3, #9
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	b29b      	uxth	r3, r3
 800894a:	4313      	orrs	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	330a      	adds	r3, #10
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b29a      	uxth	r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	330b      	adds	r3, #11
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	b29b      	uxth	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	330c      	adds	r3, #12
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	330d      	adds	r3, #13
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	b29b      	uxth	r3, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7b9a      	ldrb	r2, [r3, #14]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7bda      	ldrb	r2, [r3, #15]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	7c1a      	ldrb	r2, [r3, #16]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	7c5a      	ldrb	r2, [r3, #17]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	745a      	strb	r2, [r3, #17]
  }
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	01000101 	.word	0x01000101

080089bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	785a      	ldrb	r2, [r3, #1]
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3302      	adds	r3, #2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3303      	adds	r3, #3
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a18:	bf28      	it	cs
 8008a1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	791a      	ldrb	r2, [r3, #4]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	795a      	ldrb	r2, [r3, #5]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	799a      	ldrb	r2, [r3, #6]
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	79da      	ldrb	r2, [r3, #7]
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	7a1a      	ldrb	r2, [r3, #8]
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d002      	beq.n	8008a5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2209      	movs	r2, #9
 8008a58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	2b09      	cmp	r3, #9
 8008a5e:	f240 809d 	bls.w	8008b9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a62:	2309      	movs	r3, #9
 8008a64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a6a:	e081      	b.n	8008b70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a6c:	f107 0316 	add.w	r3, r7, #22
 8008a70:	4619      	mov	r1, r3
 8008a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a74:	f000 f99f 	bl	8008db6 <USBH_GetNextDesc>
 8008a78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d176      	bne.n	8008b70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d002      	beq.n	8008a90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2209      	movs	r2, #9
 8008a8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a94:	221a      	movs	r2, #26
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	6a3a      	ldr	r2, [r7, #32]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa6:	69f8      	ldr	r0, [r7, #28]
 8008aa8:	f000 f87e 	bl	8008ba8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ab6:	e043      	b.n	8008b40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ab8:	f107 0316 	add.w	r3, r7, #22
 8008abc:	4619      	mov	r1, r3
 8008abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac0:	f000 f979 	bl	8008db6 <USBH_GetNextDesc>
 8008ac4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d138      	bne.n	8008b40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	795b      	ldrb	r3, [r3, #5]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10f      	bne.n	8008af6 <USBH_ParseCfgDesc+0x13a>
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	799b      	ldrb	r3, [r3, #6]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d10b      	bne.n	8008af6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	79db      	ldrb	r3, [r3, #7]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10f      	bne.n	8008b06 <USBH_ParseCfgDesc+0x14a>
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b09      	cmp	r3, #9
 8008aec:	d00b      	beq.n	8008b06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	2209      	movs	r2, #9
 8008af2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008af4:	e007      	b.n	8008b06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b07      	cmp	r3, #7
 8008afc:	d004      	beq.n	8008b08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	e000      	b.n	8008b08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b10:	3201      	adds	r2, #1
 8008b12:	00d2      	lsls	r2, r2, #3
 8008b14:	211a      	movs	r1, #26
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	6a3a      	ldr	r2, [r7, #32]
 8008b20:	4413      	add	r3, r2
 8008b22:	3304      	adds	r3, #4
 8008b24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	69b9      	ldr	r1, [r7, #24]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f86b 	bl	8008c06 <USBH_ParseEPDesc>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	791b      	ldrb	r3, [r3, #4]
 8008b44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d204      	bcs.n	8008b56 <USBH_ParseCfgDesc+0x19a>
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	885a      	ldrh	r2, [r3, #2]
 8008b50:	8afb      	ldrh	r3, [r7, #22]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d8b0      	bhi.n	8008ab8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d201      	bcs.n	8008b66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e01c      	b.n	8008ba0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d805      	bhi.n	8008b84 <USBH_ParseCfgDesc+0x1c8>
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	885a      	ldrh	r2, [r3, #2]
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	f63f af74 	bhi.w	8008a6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	791b      	ldrb	r3, [r3, #4]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	bf28      	it	cs
 8008b8c:	2302      	movcs	r3, #2
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d201      	bcs.n	8008b9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e001      	b.n	8008ba0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3730      	adds	r7, #48	; 0x30
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	785a      	ldrb	r2, [r3, #1]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	789a      	ldrb	r2, [r3, #2]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	78da      	ldrb	r2, [r3, #3]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	791a      	ldrb	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	795a      	ldrb	r2, [r3, #5]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	799a      	ldrb	r2, [r3, #6]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	79da      	ldrb	r2, [r3, #7]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	7a1a      	ldrb	r2, [r3, #8]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	721a      	strb	r2, [r3, #8]
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	785a      	ldrb	r2, [r3, #1]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	789a      	ldrb	r2, [r3, #2]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	78da      	ldrb	r2, [r3, #3]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3305      	adds	r3, #5
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	799a      	ldrb	r2, [r3, #6]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	889b      	ldrh	r3, [r3, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008c62:	2303      	movs	r3, #3
 8008c64:	75fb      	strb	r3, [r7, #23]
 8008c66:	e033      	b.n	8008cd0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	889b      	ldrh	r3, [r3, #4]
 8008c6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c70:	f023 0307 	bic.w	r3, r3, #7
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	889b      	ldrh	r3, [r3, #4]
 8008c7e:	b21a      	sxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3304      	adds	r3, #4
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b299      	uxth	r1, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3305      	adds	r3, #5
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	430b      	orrs	r3, r1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d110      	bne.n	8008cc2 <USBH_ParseEPDesc+0xbc>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b299      	uxth	r1, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3305      	adds	r3, #5
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	b21b      	sxth	r3, r3
 8008cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	e001      	b.n	8008cc6 <USBH_ParseEPDesc+0xc0>
 8008cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d116      	bne.n	8008d08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	78db      	ldrb	r3, [r3, #3]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d005      	beq.n	8008cf2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d127      	bne.n	8008d42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	799b      	ldrb	r3, [r3, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <USBH_ParseEPDesc+0xfc>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	799b      	ldrb	r3, [r3, #6]
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d91f      	bls.n	8008d42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
 8008d06:	e01c      	b.n	8008d42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	78db      	ldrb	r3, [r3, #3]
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d10a      	bne.n	8008d2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	799b      	ldrb	r3, [r3, #6]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <USBH_ParseEPDesc+0x11e>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	799b      	ldrb	r3, [r3, #6]
 8008d20:	2b10      	cmp	r3, #16
 8008d22:	d90e      	bls.n	8008d42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d24:	2303      	movs	r3, #3
 8008d26:	75fb      	strb	r3, [r7, #23]
 8008d28:	e00b      	b.n	8008d42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	78db      	ldrb	r3, [r3, #3]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d105      	bne.n	8008d42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	799b      	ldrb	r3, [r3, #6]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d120      	bne.n	8008daa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	1e9a      	subs	r2, r3, #2
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	bf28      	it	cs
 8008d74:	4613      	movcs	r3, r2
 8008d76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	82fb      	strh	r3, [r7, #22]
 8008d82:	e00b      	b.n	8008d9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d96:	8afb      	ldrh	r3, [r7, #22]
 8008d98:	3302      	adds	r3, #2
 8008d9a:	82fb      	strh	r3, [r7, #22]
 8008d9c:	8afa      	ldrh	r2, [r7, #22]
 8008d9e:	8abb      	ldrh	r3, [r7, #20]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3ef      	bcc.n	8008d84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
  }
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	881a      	ldrh	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4413      	add	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	789b      	ldrb	r3, [r3, #2]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d002      	beq.n	8008e0c <USBH_CtlReq+0x20>
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d00f      	beq.n	8008e2a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e0a:	e027      	b.n	8008e5c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	88fa      	ldrh	r2, [r7, #6]
 8008e16:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e24:	2301      	movs	r3, #1
 8008e26:	75fb      	strb	r3, [r7, #23]
      break;
 8008e28:	e018      	b.n	8008e5c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f81c 	bl	8008e68 <USBH_HandleControl>
 8008e30:	4603      	mov	r3, r0
 8008e32:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <USBH_CtlReq+0x54>
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d106      	bne.n	8008e4e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	761a      	strb	r2, [r3, #24]
      break;
 8008e4c:	e005      	b.n	8008e5a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d102      	bne.n	8008e5a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	709a      	strb	r2, [r3, #2]
      break;
 8008e5a:	bf00      	nop
  }
  return status;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e70:	2301      	movs	r3, #1
 8008e72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7e1b      	ldrb	r3, [r3, #24]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	2b0a      	cmp	r3, #10
 8008e80:	f200 8156 	bhi.w	8009130 <USBH_HandleControl+0x2c8>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBH_HandleControl+0x24>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008ed3 	.word	0x08008ed3
 8008e94:	08008f3d 	.word	0x08008f3d
 8008e98:	08008f63 	.word	0x08008f63
 8008e9c:	08008f9b 	.word	0x08008f9b
 8008ea0:	08008fc5 	.word	0x08008fc5
 8008ea4:	08009017 	.word	0x08009017
 8008ea8:	08009039 	.word	0x08009039
 8008eac:	08009075 	.word	0x08009075
 8008eb0:	0800909b 	.word	0x0800909b
 8008eb4:	080090d9 	.word	0x080090d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f103 0110 	add.w	r1, r3, #16
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	795b      	ldrb	r3, [r3, #5]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f943 	bl	8009150 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	761a      	strb	r2, [r3, #24]
      break;
 8008ed0:	e139      	b.n	8009146 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	795b      	ldrb	r3, [r3, #5]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fcc5 	bl	8009868 <USBH_LL_GetURBState>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d11e      	bne.n	8008f26 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7c1b      	ldrb	r3, [r3, #16]
 8008eec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ef0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8adb      	ldrh	r3, [r3, #22]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008efa:	7b7b      	ldrb	r3, [r7, #13]
 8008efc:	2b80      	cmp	r3, #128	; 0x80
 8008efe:	d103      	bne.n	8008f08 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2203      	movs	r2, #3
 8008f04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f06:	e115      	b.n	8009134 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2205      	movs	r2, #5
 8008f0c:	761a      	strb	r2, [r3, #24]
      break;
 8008f0e:	e111      	b.n	8009134 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f10:	7b7b      	ldrb	r3, [r7, #13]
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	d103      	bne.n	8008f1e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2209      	movs	r2, #9
 8008f1a:	761a      	strb	r2, [r3, #24]
      break;
 8008f1c:	e10a      	b.n	8009134 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2207      	movs	r2, #7
 8008f22:	761a      	strb	r2, [r3, #24]
      break;
 8008f24:	e106      	b.n	8009134 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d003      	beq.n	8008f34 <USBH_HandleControl+0xcc>
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	f040 8100 	bne.w	8009134 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	220b      	movs	r2, #11
 8008f38:	761a      	strb	r2, [r3, #24]
      break;
 8008f3a:	e0fb      	b.n	8009134 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6899      	ldr	r1, [r3, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	899a      	ldrh	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	791b      	ldrb	r3, [r3, #4]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f93a 	bl	80091ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	761a      	strb	r2, [r3, #24]
      break;
 8008f60:	e0f1      	b.n	8009146 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	791b      	ldrb	r3, [r3, #4]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc7d 	bl	8009868 <USBH_LL_GetURBState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d102      	bne.n	8008f7e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2209      	movs	r2, #9
 8008f7c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b05      	cmp	r3, #5
 8008f82:	d102      	bne.n	8008f8a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f84:	2303      	movs	r3, #3
 8008f86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f88:	e0d6      	b.n	8009138 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	f040 80d3 	bne.w	8009138 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	220b      	movs	r2, #11
 8008f96:	761a      	strb	r2, [r3, #24]
      break;
 8008f98:	e0ce      	b.n	8009138 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6899      	ldr	r1, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	899a      	ldrh	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	795b      	ldrb	r3, [r3, #5]
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	9000      	str	r0, [sp, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f8ea 	bl	8009184 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2206      	movs	r2, #6
 8008fc0:	761a      	strb	r2, [r3, #24]
      break;
 8008fc2:	e0c0      	b.n	8009146 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	795b      	ldrb	r3, [r3, #5]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fc4c 	bl	8009868 <USBH_LL_GetURBState>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d103      	bne.n	8008fe2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2207      	movs	r2, #7
 8008fde:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fe0:	e0ac      	b.n	800913c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b05      	cmp	r3, #5
 8008fe6:	d105      	bne.n	8008ff4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	220c      	movs	r2, #12
 8008fec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff2:	e0a3      	b.n	800913c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d103      	bne.n	8009002 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2205      	movs	r2, #5
 8008ffe:	761a      	strb	r2, [r3, #24]
      break;
 8009000:	e09c      	b.n	800913c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b04      	cmp	r3, #4
 8009006:	f040 8099 	bne.w	800913c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	220b      	movs	r2, #11
 800900e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009010:	2302      	movs	r3, #2
 8009012:	73fb      	strb	r3, [r7, #15]
      break;
 8009014:	e092      	b.n	800913c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8d5 	bl	80091ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800902a:	b29a      	uxth	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2208      	movs	r2, #8
 8009034:	761a      	strb	r2, [r3, #24]

      break;
 8009036:	e086      	b.n	8009146 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	791b      	ldrb	r3, [r3, #4]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fc12 	bl	8009868 <USBH_LL_GetURBState>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d105      	bne.n	800905a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	220d      	movs	r2, #13
 8009052:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009058:	e072      	b.n	8009140 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b04      	cmp	r3, #4
 800905e:	d103      	bne.n	8009068 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	220b      	movs	r2, #11
 8009064:	761a      	strb	r2, [r3, #24]
      break;
 8009066:	e06b      	b.n	8009140 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b05      	cmp	r3, #5
 800906c:	d168      	bne.n	8009140 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800906e:	2303      	movs	r3, #3
 8009070:	73fb      	strb	r3, [r7, #15]
      break;
 8009072:	e065      	b.n	8009140 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	795b      	ldrb	r3, [r3, #5]
 8009078:	2201      	movs	r2, #1
 800907a:	9200      	str	r2, [sp, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	2100      	movs	r1, #0
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f87f 	bl	8009184 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	220a      	movs	r2, #10
 8009096:	761a      	strb	r2, [r3, #24]
      break;
 8009098:	e055      	b.n	8009146 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	795b      	ldrb	r3, [r3, #5]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fbe1 	bl	8009868 <USBH_LL_GetURBState>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d105      	bne.n	80090bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	220d      	movs	r2, #13
 80090b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090ba:	e043      	b.n	8009144 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d103      	bne.n	80090ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2209      	movs	r2, #9
 80090c6:	761a      	strb	r2, [r3, #24]
      break;
 80090c8:	e03c      	b.n	8009144 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d139      	bne.n	8009144 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	220b      	movs	r2, #11
 80090d4:	761a      	strb	r2, [r3, #24]
      break;
 80090d6:	e035      	b.n	8009144 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	7e5b      	ldrb	r3, [r3, #25]
 80090dc:	3301      	adds	r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	765a      	strb	r2, [r3, #25]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7e5b      	ldrb	r3, [r3, #25]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d806      	bhi.n	80090fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090f8:	e025      	b.n	8009146 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009100:	2106      	movs	r1, #6
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	795b      	ldrb	r3, [r3, #5]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f90c 	bl	8009330 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	791b      	ldrb	r3, [r3, #4]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f906 	bl	8009330 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800912a:	2302      	movs	r3, #2
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	e00a      	b.n	8009146 <USBH_HandleControl+0x2de>

    default:
      break;
 8009130:	bf00      	nop
 8009132:	e008      	b.n	8009146 <USBH_HandleControl+0x2de>
      break;
 8009134:	bf00      	nop
 8009136:	e006      	b.n	8009146 <USBH_HandleControl+0x2de>
      break;
 8009138:	bf00      	nop
 800913a:	e004      	b.n	8009146 <USBH_HandleControl+0x2de>
      break;
 800913c:	bf00      	nop
 800913e:	e002      	b.n	8009146 <USBH_HandleControl+0x2de>
      break;
 8009140:	bf00      	nop
 8009142:	e000      	b.n	8009146 <USBH_HandleControl+0x2de>
      break;
 8009144:	bf00      	nop
  }

  return status;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af04      	add	r7, sp, #16
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800915e:	79f9      	ldrb	r1, [r7, #7]
 8009160:	2300      	movs	r3, #0
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	2308      	movs	r3, #8
 8009166:	9302      	str	r3, [sp, #8]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	2300      	movs	r3, #0
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fb46 	bl	8009806 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af04      	add	r7, sp, #16
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4611      	mov	r1, r2
 8009190:	461a      	mov	r2, r3
 8009192:	460b      	mov	r3, r1
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	4613      	mov	r3, r2
 8009198:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091a8:	7979      	ldrb	r1, [r7, #5]
 80091aa:	7e3b      	ldrb	r3, [r7, #24]
 80091ac:	9303      	str	r3, [sp, #12]
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	9302      	str	r3, [sp, #8]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	2301      	movs	r3, #1
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	2300      	movs	r3, #0
 80091bc:	2200      	movs	r2, #0
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fb21 	bl	8009806 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b088      	sub	sp, #32
 80091d2:	af04      	add	r7, sp, #16
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	4611      	mov	r1, r2
 80091da:	461a      	mov	r2, r3
 80091dc:	460b      	mov	r3, r1
 80091de:	80fb      	strh	r3, [r7, #6]
 80091e0:	4613      	mov	r3, r2
 80091e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091e4:	7979      	ldrb	r1, [r7, #5]
 80091e6:	2300      	movs	r3, #0
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2301      	movs	r3, #1
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	2201      	movs	r2, #1
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fb03 	bl	8009806 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009200:	2300      	movs	r3, #0

}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b088      	sub	sp, #32
 800920e:	af04      	add	r7, sp, #16
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	4611      	mov	r1, r2
 8009216:	461a      	mov	r2, r3
 8009218:	460b      	mov	r3, r1
 800921a:	80fb      	strh	r3, [r7, #6]
 800921c:	4613      	mov	r3, r2
 800921e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800922e:	7979      	ldrb	r1, [r7, #5]
 8009230:	7e3b      	ldrb	r3, [r7, #24]
 8009232:	9303      	str	r3, [sp, #12]
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	2301      	movs	r3, #1
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2302      	movs	r3, #2
 8009242:	2200      	movs	r2, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fade 	bl	8009806 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af04      	add	r7, sp, #16
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4611      	mov	r1, r2
 8009260:	461a      	mov	r2, r3
 8009262:	460b      	mov	r3, r1
 8009264:	80fb      	strh	r3, [r7, #6]
 8009266:	4613      	mov	r3, r2
 8009268:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800926a:	7979      	ldrb	r1, [r7, #5]
 800926c:	2300      	movs	r3, #0
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	2301      	movs	r3, #1
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2302      	movs	r3, #2
 800927e:	2201      	movs	r2, #1
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fac0 	bl	8009806 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af04      	add	r7, sp, #16
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	461a      	mov	r2, r3
 800929e:	4603      	mov	r3, r0
 80092a0:	70fb      	strb	r3, [r7, #3]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70bb      	strb	r3, [r7, #2]
 80092a6:	4613      	mov	r3, r2
 80092a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80092aa:	7878      	ldrb	r0, [r7, #1]
 80092ac:	78ba      	ldrb	r2, [r7, #2]
 80092ae:	78f9      	ldrb	r1, [r7, #3]
 80092b0:	8b3b      	ldrh	r3, [r7, #24]
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	7d3b      	ldrb	r3, [r7, #20]
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	7c3b      	ldrb	r3, [r7, #16]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	4603      	mov	r3, r0
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa53 	bl	800976a <USBH_LL_OpenPipe>

  return USBH_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa72 	bl	80097c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f836 	bl	800936c <USBH_GetFreePipe>
 8009300:	4603      	mov	r3, r0
 8009302:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009304:	89fb      	ldrh	r3, [r7, #14]
 8009306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800930a:	4293      	cmp	r3, r2
 800930c:	d00a      	beq.n	8009324 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	33e0      	adds	r3, #224	; 0xe0
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009324:	89fb      	ldrh	r3, [r7, #14]
 8009326:	b2db      	uxtb	r3, r3
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d80d      	bhi.n	800935e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	33e0      	adds	r3, #224	; 0xe0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	33e0      	adds	r3, #224	; 0xe0
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	e00f      	b.n	800939e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	33e0      	adds	r3, #224	; 0xe0
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	b29b      	uxth	r3, r3
 8009396:	e007      	b.n	80093a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	3301      	adds	r3, #1
 800939c:	73fb      	strb	r3, [r7, #15]
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b0f      	cmp	r3, #15
 80093a2:	d9ec      	bls.n	800937e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80093b8:	2201      	movs	r2, #1
 80093ba:	490e      	ldr	r1, [pc, #56]	; (80093f4 <MX_USB_HOST_Init+0x40>)
 80093bc:	480e      	ldr	r0, [pc, #56]	; (80093f8 <MX_USB_HOST_Init+0x44>)
 80093be:	f7fe fba5 	bl	8007b0c <USBH_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80093c8:	f7f7 ff90 	bl	80012ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80093cc:	490b      	ldr	r1, [pc, #44]	; (80093fc <MX_USB_HOST_Init+0x48>)
 80093ce:	480a      	ldr	r0, [pc, #40]	; (80093f8 <MX_USB_HOST_Init+0x44>)
 80093d0:	f7fe fc2a 	bl	8007c28 <USBH_RegisterClass>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093da:	f7f7 ff87 	bl	80012ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093de:	4806      	ldr	r0, [pc, #24]	; (80093f8 <MX_USB_HOST_Init+0x44>)
 80093e0:	f7fe fcae 	bl	8007d40 <USBH_Start>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093ea:	f7f7 ff7f 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80093ee:	bf00      	nop
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	08009415 	.word	0x08009415
 80093f8:	200002d0 	.word	0x200002d0
 80093fc:	20000044 	.word	0x20000044

08009400 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009404:	4802      	ldr	r0, [pc, #8]	; (8009410 <MX_USB_HOST_Process+0x10>)
 8009406:	f7fe fcab 	bl	8007d60 <USBH_Process>
}
 800940a:	bf00      	nop
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200002d0 	.word	0x200002d0

08009414 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	3b01      	subs	r3, #1
 8009424:	2b04      	cmp	r3, #4
 8009426:	d819      	bhi.n	800945c <USBH_UserProcess+0x48>
 8009428:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <USBH_UserProcess+0x1c>)
 800942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942e:	bf00      	nop
 8009430:	0800945d 	.word	0x0800945d
 8009434:	0800944d 	.word	0x0800944d
 8009438:	0800945d 	.word	0x0800945d
 800943c:	08009455 	.word	0x08009455
 8009440:	08009445 	.word	0x08009445
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <USBH_UserProcess+0x58>)
 8009446:	2203      	movs	r2, #3
 8009448:	701a      	strb	r2, [r3, #0]
  break;
 800944a:	e008      	b.n	800945e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <USBH_UserProcess+0x58>)
 800944e:	2202      	movs	r2, #2
 8009450:	701a      	strb	r2, [r3, #0]
  break;
 8009452:	e004      	b.n	800945e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <USBH_UserProcess+0x58>)
 8009456:	2201      	movs	r2, #1
 8009458:	701a      	strb	r2, [r3, #0]
  break;
 800945a:	e000      	b.n	800945e <USBH_UserProcess+0x4a>

  default:
  break;
 800945c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	200006a8 	.word	0x200006a8

08009470 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08a      	sub	sp, #40	; 0x28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009478:	f107 0314 	add.w	r3, r7, #20
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	605a      	str	r2, [r3, #4]
 8009482:	609a      	str	r2, [r3, #8]
 8009484:	60da      	str	r2, [r3, #12]
 8009486:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009490:	d147      	bne.n	8009522 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009492:	2300      	movs	r3, #0
 8009494:	613b      	str	r3, [r7, #16]
 8009496:	4b25      	ldr	r3, [pc, #148]	; (800952c <HAL_HCD_MspInit+0xbc>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	4a24      	ldr	r2, [pc, #144]	; (800952c <HAL_HCD_MspInit+0xbc>)
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	6313      	str	r3, [r2, #48]	; 0x30
 80094a2:	4b22      	ldr	r3, [pc, #136]	; (800952c <HAL_HCD_MspInit+0xbc>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80094ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094b4:	2300      	movs	r3, #0
 80094b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	4619      	mov	r1, r3
 80094c2:	481b      	ldr	r0, [pc, #108]	; (8009530 <HAL_HCD_MspInit+0xc0>)
 80094c4:	f7f8 fd00 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80094cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ce:	2302      	movs	r3, #2
 80094d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094d6:	2300      	movs	r3, #0
 80094d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094da:	230a      	movs	r3, #10
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	4619      	mov	r1, r3
 80094e4:	4812      	ldr	r0, [pc, #72]	; (8009530 <HAL_HCD_MspInit+0xc0>)
 80094e6:	f7f8 fcef 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094ea:	4b10      	ldr	r3, [pc, #64]	; (800952c <HAL_HCD_MspInit+0xbc>)
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	4a0f      	ldr	r2, [pc, #60]	; (800952c <HAL_HCD_MspInit+0xbc>)
 80094f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f4:	6353      	str	r3, [r2, #52]	; 0x34
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	4b0c      	ldr	r3, [pc, #48]	; (800952c <HAL_HCD_MspInit+0xbc>)
 80094fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fe:	4a0b      	ldr	r2, [pc, #44]	; (800952c <HAL_HCD_MspInit+0xbc>)
 8009500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009504:	6453      	str	r3, [r2, #68]	; 0x44
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <HAL_HCD_MspInit+0xbc>)
 8009508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	2043      	movs	r0, #67	; 0x43
 8009518:	f7f8 fc9f 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800951c:	2043      	movs	r0, #67	; 0x43
 800951e:	f7f8 fcb8 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009522:	bf00      	nop
 8009524:	3728      	adds	r7, #40	; 0x28
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	40023800 	.word	0x40023800
 8009530:	40020000 	.word	0x40020000

08009534 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe ffeb 	bl	800851e <USBH_LL_IncTimer>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff f823 	bl	80085aa <USBH_LL_Connect>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff f82c 	bl	80085d8 <USBH_LL_Disconnect>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
 8009594:	4613      	mov	r3, r2
 8009596:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe ffdd 	bl	8008572 <USBH_LL_PortEnabled>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe ffdd 	bl	800858e <USBH_LL_PortDisabled>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d12a      	bne.n	8009644 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80095ee:	4a18      	ldr	r2, [pc, #96]	; (8009650 <USBH_LL_Init+0x74>)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a15      	ldr	r2, [pc, #84]	; (8009650 <USBH_LL_Init+0x74>)
 80095fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095fe:	4b14      	ldr	r3, [pc, #80]	; (8009650 <USBH_LL_Init+0x74>)
 8009600:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009604:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009606:	4b12      	ldr	r3, [pc, #72]	; (8009650 <USBH_LL_Init+0x74>)
 8009608:	2208      	movs	r2, #8
 800960a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800960c:	4b10      	ldr	r3, [pc, #64]	; (8009650 <USBH_LL_Init+0x74>)
 800960e:	2201      	movs	r2, #1
 8009610:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <USBH_LL_Init+0x74>)
 8009614:	2200      	movs	r2, #0
 8009616:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009618:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <USBH_LL_Init+0x74>)
 800961a:	2202      	movs	r2, #2
 800961c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <USBH_LL_Init+0x74>)
 8009620:	2200      	movs	r2, #0
 8009622:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009624:	480a      	ldr	r0, [pc, #40]	; (8009650 <USBH_LL_Init+0x74>)
 8009626:	f7f8 fe1c 	bl	8002262 <HAL_HCD_Init>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009630:	f7f7 fe5c 	bl	80012ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009634:	4806      	ldr	r0, [pc, #24]	; (8009650 <USBH_LL_Init+0x74>)
 8009636:	f7f9 fa00 	bl	8002a3a <HAL_HCD_GetCurrentFrame>
 800963a:	4603      	mov	r3, r0
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fe ff5e 	bl	8008500 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	200006ac 	.word	0x200006ac

08009654 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800966a:	4618      	mov	r0, r3
 800966c:	f7f9 f96f 	bl	800294e <HAL_HCD_Start>
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f95c 	bl	8009934 <USBH_Get_USB_Status>
 800967c:	4603      	mov	r3, r0
 800967e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009680:	7bbb      	ldrb	r3, [r7, #14]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7f9 f977 	bl	8002994 <HAL_HCD_Stop>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f941 	bl	8009934 <USBH_Get_USB_Status>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80096c8:	2301      	movs	r3, #1
 80096ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f9 f9bf 	bl	8002a56 <HAL_HCD_GetCurrentSpeed>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d00c      	beq.n	80096f8 <USBH_LL_GetSpeed+0x38>
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d80d      	bhi.n	80096fe <USBH_LL_GetSpeed+0x3e>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <USBH_LL_GetSpeed+0x2c>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d003      	beq.n	80096f2 <USBH_LL_GetSpeed+0x32>
 80096ea:	e008      	b.n	80096fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
    break;
 80096f0:	e008      	b.n	8009704 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80096f2:	2301      	movs	r3, #1
 80096f4:	73fb      	strb	r3, [r7, #15]
    break;
 80096f6:	e005      	b.n	8009704 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096f8:	2302      	movs	r3, #2
 80096fa:	73fb      	strb	r3, [r7, #15]
    break;
 80096fc:	e002      	b.n	8009704 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096fe:	2301      	movs	r3, #1
 8009700:	73fb      	strb	r3, [r7, #15]
    break;
 8009702:	bf00      	nop
  }
  return  speed;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009724:	4618      	mov	r0, r3
 8009726:	f7f9 f952 	bl	80029ce <HAL_HCD_ResetPort>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f8ff 	bl	8009934 <USBH_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973a:	7bbb      	ldrb	r3, [r7, #14]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7f9 f959 	bl	8002a12 <HAL_HCD_HC_GetXferCount>
 8009760:	4603      	mov	r3, r0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800976a:	b590      	push	{r4, r7, lr}
 800976c:	b089      	sub	sp, #36	; 0x24
 800976e:	af04      	add	r7, sp, #16
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	4608      	mov	r0, r1
 8009774:	4611      	mov	r1, r2
 8009776:	461a      	mov	r2, r3
 8009778:	4603      	mov	r3, r0
 800977a:	70fb      	strb	r3, [r7, #3]
 800977c:	460b      	mov	r3, r1
 800977e:	70bb      	strb	r3, [r7, #2]
 8009780:	4613      	mov	r3, r2
 8009782:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009792:	787c      	ldrb	r4, [r7, #1]
 8009794:	78ba      	ldrb	r2, [r7, #2]
 8009796:	78f9      	ldrb	r1, [r7, #3]
 8009798:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4623      	mov	r3, r4
 80097aa:	f7f8 fdbc 	bl	8002326 <HAL_HCD_HC_Init>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f8bd 	bl	8009934 <USBH_Get_USB_Status>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097be:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd90      	pop	{r4, r7, pc}

080097c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f8 fe2c 	bl	8002444 <HAL_HCD_HC_Halt>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f89e 	bl	8009934 <USBH_Get_USB_Status>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009806:	b590      	push	{r4, r7, lr}
 8009808:	b089      	sub	sp, #36	; 0x24
 800980a:	af04      	add	r7, sp, #16
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	461a      	mov	r2, r3
 8009814:	4603      	mov	r3, r0
 8009816:	70fb      	strb	r3, [r7, #3]
 8009818:	460b      	mov	r3, r1
 800981a:	70bb      	strb	r3, [r7, #2]
 800981c:	4613      	mov	r3, r2
 800981e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800982e:	787c      	ldrb	r4, [r7, #1]
 8009830:	78ba      	ldrb	r2, [r7, #2]
 8009832:	78f9      	ldrb	r1, [r7, #3]
 8009834:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009838:	9303      	str	r3, [sp, #12]
 800983a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800983c:	9302      	str	r3, [sp, #8]
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	4623      	mov	r3, r4
 800984a:	f7f8 fe1f 	bl	800248c <HAL_HCD_HC_SubmitRequest>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f86d 	bl	8009934 <USBH_Get_USB_Status>
 800985a:	4603      	mov	r3, r0
 800985c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800985e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	bd90      	pop	{r4, r7, pc}

08009868 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 f8b3 	bl	80029ea <HAL_HCD_HC_GetURBState>
 8009884:	4603      	mov	r3, r0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d103      	bne.n	80098ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f870 	bl	800998c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80098ac:	20c8      	movs	r0, #200	; 0xc8
 80098ae:	f7f8 f9d5 	bl	8001c5c <HAL_Delay>
  return USBH_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
 80098c8:	4613      	mov	r3, r2
 80098ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	212c      	movs	r1, #44	; 0x2c
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	4413      	add	r3, r2
 80098e0:	333b      	adds	r3, #59	; 0x3b
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	212c      	movs	r1, #44	; 0x2c
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
 80098f2:	4413      	add	r3, r2
 80098f4:	3354      	adds	r3, #84	; 0x54
 80098f6:	78ba      	ldrb	r2, [r7, #2]
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	e008      	b.n	800990e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	212c      	movs	r1, #44	; 0x2c
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	4413      	add	r3, r2
 8009908:	3355      	adds	r3, #85	; 0x55
 800990a:	78ba      	ldrb	r2, [r7, #2]
 800990c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7f8 f999 	bl	8001c5c <HAL_Delay>
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b03      	cmp	r3, #3
 8009946:	d817      	bhi.n	8009978 <USBH_Get_USB_Status+0x44>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <USBH_Get_USB_Status+0x1c>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	08009961 	.word	0x08009961
 8009954:	08009967 	.word	0x08009967
 8009958:	0800996d 	.word	0x0800996d
 800995c:	08009973 	.word	0x08009973
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]
    break;
 8009964:	e00b      	b.n	800997e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009966:	2302      	movs	r3, #2
 8009968:	73fb      	strb	r3, [r7, #15]
    break;
 800996a:	e008      	b.n	800997e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800996c:	2301      	movs	r3, #1
 800996e:	73fb      	strb	r3, [r7, #15]
    break;
 8009970:	e005      	b.n	800997e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009972:	2302      	movs	r3, #2
 8009974:	73fb      	strb	r3, [r7, #15]
    break;
 8009976:	e002      	b.n	800997e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009978:	2302      	movs	r3, #2
 800997a:	73fb      	strb	r3, [r7, #15]
    break;
 800997c:	bf00      	nop
  }
  return usb_status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
 80099a4:	e001      	b.n	80099aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80099a6:	2301      	movs	r3, #1
 80099a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	461a      	mov	r2, r3
 80099ae:	2101      	movs	r1, #1
 80099b0:	4803      	ldr	r0, [pc, #12]	; (80099c0 <MX_DriverVbusFS+0x34>)
 80099b2:	f7f8 fc3d 	bl	8002230 <HAL_GPIO_WritePin>
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	40020800 	.word	0x40020800

080099c4 <malloc>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <malloc+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f000 b82b 	b.w	8009a24 <_malloc_r>
 80099ce:	bf00      	nop
 80099d0:	200000b0 	.word	0x200000b0

080099d4 <free>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <free+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f000 b8f3 	b.w	8009bc4 <_free_r>
 80099de:	bf00      	nop
 80099e0:	200000b0 	.word	0x200000b0

080099e4 <sbrk_aligned>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4e0e      	ldr	r6, [pc, #56]	; (8009a20 <sbrk_aligned+0x3c>)
 80099e8:	460c      	mov	r4, r1
 80099ea:	6831      	ldr	r1, [r6, #0]
 80099ec:	4605      	mov	r5, r0
 80099ee:	b911      	cbnz	r1, 80099f6 <sbrk_aligned+0x12>
 80099f0:	f000 f8ac 	bl	8009b4c <_sbrk_r>
 80099f4:	6030      	str	r0, [r6, #0]
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 f8a7 	bl	8009b4c <_sbrk_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d00a      	beq.n	8009a18 <sbrk_aligned+0x34>
 8009a02:	1cc4      	adds	r4, r0, #3
 8009a04:	f024 0403 	bic.w	r4, r4, #3
 8009a08:	42a0      	cmp	r0, r4
 8009a0a:	d007      	beq.n	8009a1c <sbrk_aligned+0x38>
 8009a0c:	1a21      	subs	r1, r4, r0
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f89c 	bl	8009b4c <_sbrk_r>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d101      	bne.n	8009a1c <sbrk_aligned+0x38>
 8009a18:	f04f 34ff 	mov.w	r4, #4294967295
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	200009b4 	.word	0x200009b4

08009a24 <_malloc_r>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	1ccd      	adds	r5, r1, #3
 8009a2a:	f025 0503 	bic.w	r5, r5, #3
 8009a2e:	3508      	adds	r5, #8
 8009a30:	2d0c      	cmp	r5, #12
 8009a32:	bf38      	it	cc
 8009a34:	250c      	movcc	r5, #12
 8009a36:	2d00      	cmp	r5, #0
 8009a38:	4607      	mov	r7, r0
 8009a3a:	db01      	blt.n	8009a40 <_malloc_r+0x1c>
 8009a3c:	42a9      	cmp	r1, r5
 8009a3e:	d905      	bls.n	8009a4c <_malloc_r+0x28>
 8009a40:	230c      	movs	r3, #12
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	2600      	movs	r6, #0
 8009a46:	4630      	mov	r0, r6
 8009a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b20 <_malloc_r+0xfc>
 8009a50:	f000 f868 	bl	8009b24 <__malloc_lock>
 8009a54:	f8d8 3000 	ldr.w	r3, [r8]
 8009a58:	461c      	mov	r4, r3
 8009a5a:	bb5c      	cbnz	r4, 8009ab4 <_malloc_r+0x90>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7ff ffc0 	bl	80099e4 <sbrk_aligned>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	4604      	mov	r4, r0
 8009a68:	d155      	bne.n	8009b16 <_malloc_r+0xf2>
 8009a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8009a6e:	4626      	mov	r6, r4
 8009a70:	2e00      	cmp	r6, #0
 8009a72:	d145      	bne.n	8009b00 <_malloc_r+0xdc>
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	d048      	beq.n	8009b0a <_malloc_r+0xe6>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	eb04 0903 	add.w	r9, r4, r3
 8009a82:	f000 f863 	bl	8009b4c <_sbrk_r>
 8009a86:	4581      	cmp	r9, r0
 8009a88:	d13f      	bne.n	8009b0a <_malloc_r+0xe6>
 8009a8a:	6821      	ldr	r1, [r4, #0]
 8009a8c:	1a6d      	subs	r5, r5, r1
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff ffa7 	bl	80099e4 <sbrk_aligned>
 8009a96:	3001      	adds	r0, #1
 8009a98:	d037      	beq.n	8009b0a <_malloc_r+0xe6>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	442b      	add	r3, r5
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d038      	beq.n	8009b1a <_malloc_r+0xf6>
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	42a2      	cmp	r2, r4
 8009aac:	d12b      	bne.n	8009b06 <_malloc_r+0xe2>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	e00f      	b.n	8009ad4 <_malloc_r+0xb0>
 8009ab4:	6822      	ldr	r2, [r4, #0]
 8009ab6:	1b52      	subs	r2, r2, r5
 8009ab8:	d41f      	bmi.n	8009afa <_malloc_r+0xd6>
 8009aba:	2a0b      	cmp	r2, #11
 8009abc:	d917      	bls.n	8009aee <_malloc_r+0xca>
 8009abe:	1961      	adds	r1, r4, r5
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	6025      	str	r5, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	6059      	strne	r1, [r3, #4]
 8009ac8:	6863      	ldr	r3, [r4, #4]
 8009aca:	bf08      	it	eq
 8009acc:	f8c8 1000 	streq.w	r1, [r8]
 8009ad0:	5162      	str	r2, [r4, r5]
 8009ad2:	604b      	str	r3, [r1, #4]
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f104 060b 	add.w	r6, r4, #11
 8009ada:	f000 f829 	bl	8009b30 <__malloc_unlock>
 8009ade:	f026 0607 	bic.w	r6, r6, #7
 8009ae2:	1d23      	adds	r3, r4, #4
 8009ae4:	1af2      	subs	r2, r6, r3
 8009ae6:	d0ae      	beq.n	8009a46 <_malloc_r+0x22>
 8009ae8:	1b9b      	subs	r3, r3, r6
 8009aea:	50a3      	str	r3, [r4, r2]
 8009aec:	e7ab      	b.n	8009a46 <_malloc_r+0x22>
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	6862      	ldr	r2, [r4, #4]
 8009af2:	d1dd      	bne.n	8009ab0 <_malloc_r+0x8c>
 8009af4:	f8c8 2000 	str.w	r2, [r8]
 8009af8:	e7ec      	b.n	8009ad4 <_malloc_r+0xb0>
 8009afa:	4623      	mov	r3, r4
 8009afc:	6864      	ldr	r4, [r4, #4]
 8009afe:	e7ac      	b.n	8009a5a <_malloc_r+0x36>
 8009b00:	4634      	mov	r4, r6
 8009b02:	6876      	ldr	r6, [r6, #4]
 8009b04:	e7b4      	b.n	8009a70 <_malloc_r+0x4c>
 8009b06:	4613      	mov	r3, r2
 8009b08:	e7cc      	b.n	8009aa4 <_malloc_r+0x80>
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f000 f80e 	bl	8009b30 <__malloc_unlock>
 8009b14:	e797      	b.n	8009a46 <_malloc_r+0x22>
 8009b16:	6025      	str	r5, [r4, #0]
 8009b18:	e7dc      	b.n	8009ad4 <_malloc_r+0xb0>
 8009b1a:	605b      	str	r3, [r3, #4]
 8009b1c:	deff      	udf	#255	; 0xff
 8009b1e:	bf00      	nop
 8009b20:	200009b0 	.word	0x200009b0

08009b24 <__malloc_lock>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__malloc_lock+0x8>)
 8009b26:	f000 b84b 	b.w	8009bc0 <__retarget_lock_acquire_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20000af4 	.word	0x20000af4

08009b30 <__malloc_unlock>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__malloc_unlock+0x8>)
 8009b32:	f000 b846 	b.w	8009bc2 <__retarget_lock_release_recursive>
 8009b36:	bf00      	nop
 8009b38:	20000af4 	.word	0x20000af4

08009b3c <memset>:
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d100      	bne.n	8009b46 <memset+0xa>
 8009b44:	4770      	bx	lr
 8009b46:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4a:	e7f9      	b.n	8009b40 <memset+0x4>

08009b4c <_sbrk_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d06      	ldr	r5, [pc, #24]	; (8009b68 <_sbrk_r+0x1c>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	f7f7 ff9c 	bl	8001a94 <_sbrk>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_sbrk_r+0x1a>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_sbrk_r+0x1a>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20000af0 	.word	0x20000af0

08009b6c <__errno>:
 8009b6c:	4b01      	ldr	r3, [pc, #4]	; (8009b74 <__errno+0x8>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	200000b0 	.word	0x200000b0

08009b78 <__libc_init_array>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	4d0d      	ldr	r5, [pc, #52]	; (8009bb0 <__libc_init_array+0x38>)
 8009b7c:	4c0d      	ldr	r4, [pc, #52]	; (8009bb4 <__libc_init_array+0x3c>)
 8009b7e:	1b64      	subs	r4, r4, r5
 8009b80:	10a4      	asrs	r4, r4, #2
 8009b82:	2600      	movs	r6, #0
 8009b84:	42a6      	cmp	r6, r4
 8009b86:	d109      	bne.n	8009b9c <__libc_init_array+0x24>
 8009b88:	4d0b      	ldr	r5, [pc, #44]	; (8009bb8 <__libc_init_array+0x40>)
 8009b8a:	4c0c      	ldr	r4, [pc, #48]	; (8009bbc <__libc_init_array+0x44>)
 8009b8c:	f000 f866 	bl	8009c5c <_init>
 8009b90:	1b64      	subs	r4, r4, r5
 8009b92:	10a4      	asrs	r4, r4, #2
 8009b94:	2600      	movs	r6, #0
 8009b96:	42a6      	cmp	r6, r4
 8009b98:	d105      	bne.n	8009ba6 <__libc_init_array+0x2e>
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba0:	4798      	blx	r3
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7ee      	b.n	8009b84 <__libc_init_array+0xc>
 8009ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009baa:	4798      	blx	r3
 8009bac:	3601      	adds	r6, #1
 8009bae:	e7f2      	b.n	8009b96 <__libc_init_array+0x1e>
 8009bb0:	08009c98 	.word	0x08009c98
 8009bb4:	08009c98 	.word	0x08009c98
 8009bb8:	08009c98 	.word	0x08009c98
 8009bbc:	08009c9c 	.word	0x08009c9c

08009bc0 <__retarget_lock_acquire_recursive>:
 8009bc0:	4770      	bx	lr

08009bc2 <__retarget_lock_release_recursive>:
 8009bc2:	4770      	bx	lr

08009bc4 <_free_r>:
 8009bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d044      	beq.n	8009c54 <_free_r+0x90>
 8009bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8009bd6:	bfb8      	it	lt
 8009bd8:	18e4      	addlt	r4, r4, r3
 8009bda:	f7ff ffa3 	bl	8009b24 <__malloc_lock>
 8009bde:	4a1e      	ldr	r2, [pc, #120]	; (8009c58 <_free_r+0x94>)
 8009be0:	9801      	ldr	r0, [sp, #4]
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	b933      	cbnz	r3, 8009bf4 <_free_r+0x30>
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	6014      	str	r4, [r2, #0]
 8009bea:	b003      	add	sp, #12
 8009bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf0:	f7ff bf9e 	b.w	8009b30 <__malloc_unlock>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d908      	bls.n	8009c0a <_free_r+0x46>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf01      	itttt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	1949      	addeq	r1, r1, r5
 8009c06:	6021      	streq	r1, [r4, #0]
 8009c08:	e7ed      	b.n	8009be6 <_free_r+0x22>
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	b10b      	cbz	r3, 8009c14 <_free_r+0x50>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d9fa      	bls.n	8009c0a <_free_r+0x46>
 8009c14:	6811      	ldr	r1, [r2, #0]
 8009c16:	1855      	adds	r5, r2, r1
 8009c18:	42a5      	cmp	r5, r4
 8009c1a:	d10b      	bne.n	8009c34 <_free_r+0x70>
 8009c1c:	6824      	ldr	r4, [r4, #0]
 8009c1e:	4421      	add	r1, r4
 8009c20:	1854      	adds	r4, r2, r1
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	6011      	str	r1, [r2, #0]
 8009c26:	d1e0      	bne.n	8009bea <_free_r+0x26>
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	6053      	str	r3, [r2, #4]
 8009c2e:	440c      	add	r4, r1
 8009c30:	6014      	str	r4, [r2, #0]
 8009c32:	e7da      	b.n	8009bea <_free_r+0x26>
 8009c34:	d902      	bls.n	8009c3c <_free_r+0x78>
 8009c36:	230c      	movs	r3, #12
 8009c38:	6003      	str	r3, [r0, #0]
 8009c3a:	e7d6      	b.n	8009bea <_free_r+0x26>
 8009c3c:	6825      	ldr	r5, [r4, #0]
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf04      	itt	eq
 8009c44:	6819      	ldreq	r1, [r3, #0]
 8009c46:	685b      	ldreq	r3, [r3, #4]
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	bf04      	itt	eq
 8009c4c:	1949      	addeq	r1, r1, r5
 8009c4e:	6021      	streq	r1, [r4, #0]
 8009c50:	6054      	str	r4, [r2, #4]
 8009c52:	e7ca      	b.n	8009bea <_free_r+0x26>
 8009c54:	b003      	add	sp, #12
 8009c56:	bd30      	pop	{r4, r5, pc}
 8009c58:	200009b0 	.word	0x200009b0

08009c5c <_init>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr

08009c68 <_fini>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr
